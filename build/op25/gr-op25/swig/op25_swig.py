# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_op25_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_op25_swig')
    _op25_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_op25_swig', [dirname(__file__)])
        except ImportError:
            import _op25_swig
            return _op25_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_op25_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _op25_swig = swig_import_helper()
    del swig_import_helper
else:
    import _op25_swig
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _op25_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _op25_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _op25_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _op25_swig.high_res_timer_epoch()
class fsk4_demod_ff(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(queue, sample_rate_Hz, symbol_rate_Hz):
        """
        make(msg_queue_sptr queue, float sample_rate_Hz, float symbol_rate_Hz) -> fsk4_demod_ff_sptr

        Demodulate APCO P25 CF4M signals.

        op25_fsk4_demod_ff is a GNU Radio block for demodulating APCO P25 CF4M signals. This class expects its input to consist of a 4 level FSK modulated baseband signal. It produces a stream of symbols.

        All inputs are post FM demodulator and symbol shaping filter data is normalized before being sent to this block so these parameters should not need adjusting even when working on different signals.

        Nominal levels are -3, -1, +1, and +3.

        Params: (queue, sample_rate_Hz, symbol_rate_Hz)
        """
        return _op25_swig.fsk4_demod_ff_make(queue, sample_rate_Hz, symbol_rate_Hz)

    make = staticmethod(make)
    __swig_destroy__ = _op25_swig.delete_fsk4_demod_ff
    __del__ = lambda self: None
fsk4_demod_ff_swigregister = _op25_swig.fsk4_demod_ff_swigregister
fsk4_demod_ff_swigregister(fsk4_demod_ff)

def fsk4_demod_ff_make(queue, sample_rate_Hz, symbol_rate_Hz):
    """
    fsk4_demod_ff_make(msg_queue_sptr queue, float sample_rate_Hz, float symbol_rate_Hz) -> fsk4_demod_ff_sptr

    Demodulate APCO P25 CF4M signals.

    op25_fsk4_demod_ff is a GNU Radio block for demodulating APCO P25 CF4M signals. This class expects its input to consist of a 4 level FSK modulated baseband signal. It produces a stream of symbols.

    All inputs are post FM demodulator and symbol shaping filter data is normalized before being sent to this block so these parameters should not need adjusting even when working on different signals.

    Nominal levels are -3, -1, +1, and +3.

    Params: (queue, sample_rate_Hz, symbol_rate_Hz)
    """
    return _op25_swig.fsk4_demod_ff_make(queue, sample_rate_Hz, symbol_rate_Hz)

class fsk4_demod_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::op25::fsk4_demod_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::op25::fsk4_demod_ff)> self) -> fsk4_demod_ff_sptr
        __init__(boost::shared_ptr<(gr::op25::fsk4_demod_ff)> self, fsk4_demod_ff p) -> fsk4_demod_ff_sptr
        """
        this = _op25_swig.new_fsk4_demod_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fsk4_demod_ff_sptr self) -> fsk4_demod_ff"""
        return _op25_swig.fsk4_demod_ff_sptr___deref__(self)

    __swig_destroy__ = _op25_swig.delete_fsk4_demod_ff_sptr
    __del__ = lambda self: None

    def make(self, queue, sample_rate_Hz, symbol_rate_Hz):
        """
        make(fsk4_demod_ff_sptr self, msg_queue_sptr queue, float sample_rate_Hz, float symbol_rate_Hz) -> fsk4_demod_ff_sptr

        Demodulate APCO P25 CF4M signals.

        op25_fsk4_demod_ff is a GNU Radio block for demodulating APCO P25 CF4M signals. This class expects its input to consist of a 4 level FSK modulated baseband signal. It produces a stream of symbols.

        All inputs are post FM demodulator and symbol shaping filter data is normalized before being sent to this block so these parameters should not need adjusting even when working on different signals.

        Nominal levels are -3, -1, +1, and +3.

        Params: (queue, sample_rate_Hz, symbol_rate_Hz)
        """
        return _op25_swig.fsk4_demod_ff_sptr_make(self, queue, sample_rate_Hz, symbol_rate_Hz)


    def history(self):
        """history(fsk4_demod_ff_sptr self) -> unsigned int"""
        return _op25_swig.fsk4_demod_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fsk4_demod_ff_sptr self, int which, int delay)
        declare_sample_delay(fsk4_demod_ff_sptr self, unsigned int delay)
        """
        return _op25_swig.fsk4_demod_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(fsk4_demod_ff_sptr self, int which) -> unsigned int"""
        return _op25_swig.fsk4_demod_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(fsk4_demod_ff_sptr self) -> int"""
        return _op25_swig.fsk4_demod_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(fsk4_demod_ff_sptr self) -> double"""
        return _op25_swig.fsk4_demod_ff_sptr_relative_rate(self)


    def start(self):
        """start(fsk4_demod_ff_sptr self) -> bool"""
        return _op25_swig.fsk4_demod_ff_sptr_start(self)


    def stop(self):
        """stop(fsk4_demod_ff_sptr self) -> bool"""
        return _op25_swig.fsk4_demod_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(fsk4_demod_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _op25_swig.fsk4_demod_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(fsk4_demod_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _op25_swig.fsk4_demod_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(fsk4_demod_ff_sptr self) -> int"""
        return _op25_swig.fsk4_demod_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(fsk4_demod_ff_sptr self, int m)"""
        return _op25_swig.fsk4_demod_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fsk4_demod_ff_sptr self)"""
        return _op25_swig.fsk4_demod_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fsk4_demod_ff_sptr self) -> bool"""
        return _op25_swig.fsk4_demod_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(fsk4_demod_ff_sptr self, int m)"""
        return _op25_swig.fsk4_demod_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(fsk4_demod_ff_sptr self) -> int"""
        return _op25_swig.fsk4_demod_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fsk4_demod_ff_sptr self, int i) -> long"""
        return _op25_swig.fsk4_demod_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fsk4_demod_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(fsk4_demod_ff_sptr self, int port, long max_output_buffer)
        """
        return _op25_swig.fsk4_demod_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fsk4_demod_ff_sptr self, int i) -> long"""
        return _op25_swig.fsk4_demod_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fsk4_demod_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(fsk4_demod_ff_sptr self, int port, long min_output_buffer)
        """
        return _op25_swig.fsk4_demod_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(fsk4_demod_ff_sptr self) -> float"""
        return _op25_swig.fsk4_demod_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fsk4_demod_ff_sptr self) -> float"""
        return _op25_swig.fsk4_demod_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fsk4_demod_ff_sptr self) -> float"""
        return _op25_swig.fsk4_demod_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(fsk4_demod_ff_sptr self) -> float"""
        return _op25_swig.fsk4_demod_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fsk4_demod_ff_sptr self) -> float"""
        return _op25_swig.fsk4_demod_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(fsk4_demod_ff_sptr self) -> float"""
        return _op25_swig.fsk4_demod_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fsk4_demod_ff_sptr self, int which) -> float
        pc_input_buffers_full(fsk4_demod_ff_sptr self) -> pmt_vector_float
        """
        return _op25_swig.fsk4_demod_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fsk4_demod_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(fsk4_demod_ff_sptr self) -> pmt_vector_float
        """
        return _op25_swig.fsk4_demod_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fsk4_demod_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(fsk4_demod_ff_sptr self) -> pmt_vector_float
        """
        return _op25_swig.fsk4_demod_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fsk4_demod_ff_sptr self, int which) -> float
        pc_output_buffers_full(fsk4_demod_ff_sptr self) -> pmt_vector_float
        """
        return _op25_swig.fsk4_demod_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fsk4_demod_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(fsk4_demod_ff_sptr self) -> pmt_vector_float
        """
        return _op25_swig.fsk4_demod_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fsk4_demod_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(fsk4_demod_ff_sptr self) -> pmt_vector_float
        """
        return _op25_swig.fsk4_demod_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(fsk4_demod_ff_sptr self) -> float"""
        return _op25_swig.fsk4_demod_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(fsk4_demod_ff_sptr self) -> float"""
        return _op25_swig.fsk4_demod_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(fsk4_demod_ff_sptr self) -> float"""
        return _op25_swig.fsk4_demod_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(fsk4_demod_ff_sptr self) -> float"""
        return _op25_swig.fsk4_demod_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(fsk4_demod_ff_sptr self) -> float"""
        return _op25_swig.fsk4_demod_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fsk4_demod_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _op25_swig.fsk4_demod_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fsk4_demod_ff_sptr self)"""
        return _op25_swig.fsk4_demod_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fsk4_demod_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _op25_swig.fsk4_demod_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(fsk4_demod_ff_sptr self) -> int"""
        return _op25_swig.fsk4_demod_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(fsk4_demod_ff_sptr self) -> int"""
        return _op25_swig.fsk4_demod_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(fsk4_demod_ff_sptr self, int priority) -> int"""
        return _op25_swig.fsk4_demod_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(fsk4_demod_ff_sptr self) -> std::string"""
        return _op25_swig.fsk4_demod_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fsk4_demod_ff_sptr self) -> std::string"""
        return _op25_swig.fsk4_demod_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fsk4_demod_ff_sptr self) -> io_signature_sptr"""
        return _op25_swig.fsk4_demod_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fsk4_demod_ff_sptr self) -> io_signature_sptr"""
        return _op25_swig.fsk4_demod_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fsk4_demod_ff_sptr self) -> long"""
        return _op25_swig.fsk4_demod_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fsk4_demod_ff_sptr self) -> basic_block_sptr"""
        return _op25_swig.fsk4_demod_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fsk4_demod_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _op25_swig.fsk4_demod_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fsk4_demod_ff_sptr self) -> std::string"""
        return _op25_swig.fsk4_demod_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fsk4_demod_ff_sptr self, std::string name)"""
        return _op25_swig.fsk4_demod_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fsk4_demod_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _op25_swig.fsk4_demod_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fsk4_demod_ff_sptr self) -> swig_int_ptr"""
        return _op25_swig.fsk4_demod_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fsk4_demod_ff_sptr self) -> swig_int_ptr"""
        return _op25_swig.fsk4_demod_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fsk4_demod_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _op25_swig.fsk4_demod_ff_sptr_message_subscribers(self, which_port)

fsk4_demod_ff_sptr_swigregister = _op25_swig.fsk4_demod_ff_sptr_swigregister
fsk4_demod_ff_sptr_swigregister(fsk4_demod_ff_sptr)


fsk4_demod_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fsk4_demod_ff = fsk4_demod_ff.make;

class fsk4_slicer_fb(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(slice_levels):
        """
        make(pmt_vector_float slice_levels) -> fsk4_slicer_fb_sptr

        Return a shared_ptr to a new instance of op25::fsk4_slicer_fb.

        To avoid accidental use of raw pointers, op25::fsk4_slicer_fb's constructor is in a private implementation class. op25::fsk4_slicer_fb::make is the public interface for creating new instances.

        Params: (slice_levels)
        """
        return _op25_swig.fsk4_slicer_fb_make(slice_levels)

    make = staticmethod(make)
    __swig_destroy__ = _op25_swig.delete_fsk4_slicer_fb
    __del__ = lambda self: None
fsk4_slicer_fb_swigregister = _op25_swig.fsk4_slicer_fb_swigregister
fsk4_slicer_fb_swigregister(fsk4_slicer_fb)

def fsk4_slicer_fb_make(slice_levels):
    """
    fsk4_slicer_fb_make(pmt_vector_float slice_levels) -> fsk4_slicer_fb_sptr

    Return a shared_ptr to a new instance of op25::fsk4_slicer_fb.

    To avoid accidental use of raw pointers, op25::fsk4_slicer_fb's constructor is in a private implementation class. op25::fsk4_slicer_fb::make is the public interface for creating new instances.

    Params: (slice_levels)
    """
    return _op25_swig.fsk4_slicer_fb_make(slice_levels)

class fsk4_slicer_fb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::op25::fsk4_slicer_fb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::op25::fsk4_slicer_fb)> self) -> fsk4_slicer_fb_sptr
        __init__(boost::shared_ptr<(gr::op25::fsk4_slicer_fb)> self, fsk4_slicer_fb p) -> fsk4_slicer_fb_sptr
        """
        this = _op25_swig.new_fsk4_slicer_fb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fsk4_slicer_fb_sptr self) -> fsk4_slicer_fb"""
        return _op25_swig.fsk4_slicer_fb_sptr___deref__(self)

    __swig_destroy__ = _op25_swig.delete_fsk4_slicer_fb_sptr
    __del__ = lambda self: None

    def make(self, slice_levels):
        """
        make(fsk4_slicer_fb_sptr self, pmt_vector_float slice_levels) -> fsk4_slicer_fb_sptr

        Return a shared_ptr to a new instance of op25::fsk4_slicer_fb.

        To avoid accidental use of raw pointers, op25::fsk4_slicer_fb's constructor is in a private implementation class. op25::fsk4_slicer_fb::make is the public interface for creating new instances.

        Params: (slice_levels)
        """
        return _op25_swig.fsk4_slicer_fb_sptr_make(self, slice_levels)


    def history(self):
        """history(fsk4_slicer_fb_sptr self) -> unsigned int"""
        return _op25_swig.fsk4_slicer_fb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fsk4_slicer_fb_sptr self, int which, int delay)
        declare_sample_delay(fsk4_slicer_fb_sptr self, unsigned int delay)
        """
        return _op25_swig.fsk4_slicer_fb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(fsk4_slicer_fb_sptr self, int which) -> unsigned int"""
        return _op25_swig.fsk4_slicer_fb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(fsk4_slicer_fb_sptr self) -> int"""
        return _op25_swig.fsk4_slicer_fb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(fsk4_slicer_fb_sptr self) -> double"""
        return _op25_swig.fsk4_slicer_fb_sptr_relative_rate(self)


    def start(self):
        """start(fsk4_slicer_fb_sptr self) -> bool"""
        return _op25_swig.fsk4_slicer_fb_sptr_start(self)


    def stop(self):
        """stop(fsk4_slicer_fb_sptr self) -> bool"""
        return _op25_swig.fsk4_slicer_fb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(fsk4_slicer_fb_sptr self, unsigned int which_input) -> uint64_t"""
        return _op25_swig.fsk4_slicer_fb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(fsk4_slicer_fb_sptr self, unsigned int which_output) -> uint64_t"""
        return _op25_swig.fsk4_slicer_fb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(fsk4_slicer_fb_sptr self) -> int"""
        return _op25_swig.fsk4_slicer_fb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(fsk4_slicer_fb_sptr self, int m)"""
        return _op25_swig.fsk4_slicer_fb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fsk4_slicer_fb_sptr self)"""
        return _op25_swig.fsk4_slicer_fb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fsk4_slicer_fb_sptr self) -> bool"""
        return _op25_swig.fsk4_slicer_fb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(fsk4_slicer_fb_sptr self, int m)"""
        return _op25_swig.fsk4_slicer_fb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(fsk4_slicer_fb_sptr self) -> int"""
        return _op25_swig.fsk4_slicer_fb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fsk4_slicer_fb_sptr self, int i) -> long"""
        return _op25_swig.fsk4_slicer_fb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fsk4_slicer_fb_sptr self, long max_output_buffer)
        set_max_output_buffer(fsk4_slicer_fb_sptr self, int port, long max_output_buffer)
        """
        return _op25_swig.fsk4_slicer_fb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fsk4_slicer_fb_sptr self, int i) -> long"""
        return _op25_swig.fsk4_slicer_fb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fsk4_slicer_fb_sptr self, long min_output_buffer)
        set_min_output_buffer(fsk4_slicer_fb_sptr self, int port, long min_output_buffer)
        """
        return _op25_swig.fsk4_slicer_fb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_swig.fsk4_slicer_fb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_swig.fsk4_slicer_fb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_swig.fsk4_slicer_fb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_swig.fsk4_slicer_fb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_swig.fsk4_slicer_fb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_swig.fsk4_slicer_fb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fsk4_slicer_fb_sptr self, int which) -> float
        pc_input_buffers_full(fsk4_slicer_fb_sptr self) -> pmt_vector_float
        """
        return _op25_swig.fsk4_slicer_fb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fsk4_slicer_fb_sptr self, int which) -> float
        pc_input_buffers_full_avg(fsk4_slicer_fb_sptr self) -> pmt_vector_float
        """
        return _op25_swig.fsk4_slicer_fb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fsk4_slicer_fb_sptr self, int which) -> float
        pc_input_buffers_full_var(fsk4_slicer_fb_sptr self) -> pmt_vector_float
        """
        return _op25_swig.fsk4_slicer_fb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fsk4_slicer_fb_sptr self, int which) -> float
        pc_output_buffers_full(fsk4_slicer_fb_sptr self) -> pmt_vector_float
        """
        return _op25_swig.fsk4_slicer_fb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fsk4_slicer_fb_sptr self, int which) -> float
        pc_output_buffers_full_avg(fsk4_slicer_fb_sptr self) -> pmt_vector_float
        """
        return _op25_swig.fsk4_slicer_fb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fsk4_slicer_fb_sptr self, int which) -> float
        pc_output_buffers_full_var(fsk4_slicer_fb_sptr self) -> pmt_vector_float
        """
        return _op25_swig.fsk4_slicer_fb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_swig.fsk4_slicer_fb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_swig.fsk4_slicer_fb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_swig.fsk4_slicer_fb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_swig.fsk4_slicer_fb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_swig.fsk4_slicer_fb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fsk4_slicer_fb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _op25_swig.fsk4_slicer_fb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fsk4_slicer_fb_sptr self)"""
        return _op25_swig.fsk4_slicer_fb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fsk4_slicer_fb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _op25_swig.fsk4_slicer_fb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(fsk4_slicer_fb_sptr self) -> int"""
        return _op25_swig.fsk4_slicer_fb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(fsk4_slicer_fb_sptr self) -> int"""
        return _op25_swig.fsk4_slicer_fb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(fsk4_slicer_fb_sptr self, int priority) -> int"""
        return _op25_swig.fsk4_slicer_fb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(fsk4_slicer_fb_sptr self) -> std::string"""
        return _op25_swig.fsk4_slicer_fb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fsk4_slicer_fb_sptr self) -> std::string"""
        return _op25_swig.fsk4_slicer_fb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fsk4_slicer_fb_sptr self) -> io_signature_sptr"""
        return _op25_swig.fsk4_slicer_fb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fsk4_slicer_fb_sptr self) -> io_signature_sptr"""
        return _op25_swig.fsk4_slicer_fb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fsk4_slicer_fb_sptr self) -> long"""
        return _op25_swig.fsk4_slicer_fb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fsk4_slicer_fb_sptr self) -> basic_block_sptr"""
        return _op25_swig.fsk4_slicer_fb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fsk4_slicer_fb_sptr self, int ninputs, int noutputs) -> bool"""
        return _op25_swig.fsk4_slicer_fb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fsk4_slicer_fb_sptr self) -> std::string"""
        return _op25_swig.fsk4_slicer_fb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fsk4_slicer_fb_sptr self, std::string name)"""
        return _op25_swig.fsk4_slicer_fb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fsk4_slicer_fb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _op25_swig.fsk4_slicer_fb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fsk4_slicer_fb_sptr self) -> swig_int_ptr"""
        return _op25_swig.fsk4_slicer_fb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fsk4_slicer_fb_sptr self) -> swig_int_ptr"""
        return _op25_swig.fsk4_slicer_fb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fsk4_slicer_fb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _op25_swig.fsk4_slicer_fb_sptr_message_subscribers(self, which_port)

fsk4_slicer_fb_sptr_swigregister = _op25_swig.fsk4_slicer_fb_sptr_swigregister
fsk4_slicer_fb_sptr_swigregister(fsk4_slicer_fb_sptr)


fsk4_slicer_fb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fsk4_slicer_fb = fsk4_slicer_fb.make;

class decoder_ff(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make():
        """
        make() -> decoder_ff_sptr

        Return a shared_ptr to a new instance of op25::decoder_ff.

        To avoid accidental use of raw pointers, op25::decoder_ff's constructor is in a private implementation class. op25::decoder_ff::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _op25_swig.decoder_ff_make()

    make = staticmethod(make)

    def destination(self):
        """
        destination(decoder_ff self) -> char const *

        Return a pointer to a string identifying the destination of the received frames.

        Params: (NONE)
        """
        return _op25_swig.decoder_ff_destination(self)


    def get_msgq(self):
        """
        get_msgq(decoder_ff self) -> msg_queue_sptr

        Accessor for the msgq attribute. Returns a pointer to the msgq if it exists.

        Params: (NONE)
        """
        return _op25_swig.decoder_ff_get_msgq(self)


    def set_msgq(self, msgq):
        """
        set_msgq(decoder_ff self, msg_queue_sptr msgq)

        Accessor for the msgq attribute. Sets the msgq to point to the provided message queue object.

        Params: (msgq)
        """
        return _op25_swig.decoder_ff_set_msgq(self, msgq)

    __swig_destroy__ = _op25_swig.delete_decoder_ff
    __del__ = lambda self: None
decoder_ff_swigregister = _op25_swig.decoder_ff_swigregister
decoder_ff_swigregister(decoder_ff)

def decoder_ff_make():
    """
    decoder_ff_make() -> decoder_ff_sptr

    Return a shared_ptr to a new instance of op25::decoder_ff.

    To avoid accidental use of raw pointers, op25::decoder_ff's constructor is in a private implementation class. op25::decoder_ff::make is the public interface for creating new instances.

    Params: (NONE)
    """
    return _op25_swig.decoder_ff_make()

class decoder_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::op25::decoder_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::op25::decoder_ff)> self) -> decoder_ff_sptr
        __init__(boost::shared_ptr<(gr::op25::decoder_ff)> self, decoder_ff p) -> decoder_ff_sptr
        """
        this = _op25_swig.new_decoder_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(decoder_ff_sptr self) -> decoder_ff"""
        return _op25_swig.decoder_ff_sptr___deref__(self)

    __swig_destroy__ = _op25_swig.delete_decoder_ff_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(decoder_ff_sptr self) -> decoder_ff_sptr

        Return a shared_ptr to a new instance of op25::decoder_ff.

        To avoid accidental use of raw pointers, op25::decoder_ff's constructor is in a private implementation class. op25::decoder_ff::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _op25_swig.decoder_ff_sptr_make(self)


    def destination(self):
        """
        destination(decoder_ff_sptr self) -> char const *

        Return a pointer to a string identifying the destination of the received frames.

        Params: (NONE)
        """
        return _op25_swig.decoder_ff_sptr_destination(self)


    def get_msgq(self):
        """
        get_msgq(decoder_ff_sptr self) -> msg_queue_sptr

        Accessor for the msgq attribute. Returns a pointer to the msgq if it exists.

        Params: (NONE)
        """
        return _op25_swig.decoder_ff_sptr_get_msgq(self)


    def set_msgq(self, msgq):
        """
        set_msgq(decoder_ff_sptr self, msg_queue_sptr msgq)

        Accessor for the msgq attribute. Sets the msgq to point to the provided message queue object.

        Params: (msgq)
        """
        return _op25_swig.decoder_ff_sptr_set_msgq(self, msgq)


    def history(self):
        """history(decoder_ff_sptr self) -> unsigned int"""
        return _op25_swig.decoder_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(decoder_ff_sptr self, int which, int delay)
        declare_sample_delay(decoder_ff_sptr self, unsigned int delay)
        """
        return _op25_swig.decoder_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(decoder_ff_sptr self, int which) -> unsigned int"""
        return _op25_swig.decoder_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(decoder_ff_sptr self) -> int"""
        return _op25_swig.decoder_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(decoder_ff_sptr self) -> double"""
        return _op25_swig.decoder_ff_sptr_relative_rate(self)


    def start(self):
        """start(decoder_ff_sptr self) -> bool"""
        return _op25_swig.decoder_ff_sptr_start(self)


    def stop(self):
        """stop(decoder_ff_sptr self) -> bool"""
        return _op25_swig.decoder_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(decoder_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _op25_swig.decoder_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(decoder_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _op25_swig.decoder_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(decoder_ff_sptr self) -> int"""
        return _op25_swig.decoder_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(decoder_ff_sptr self, int m)"""
        return _op25_swig.decoder_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(decoder_ff_sptr self)"""
        return _op25_swig.decoder_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(decoder_ff_sptr self) -> bool"""
        return _op25_swig.decoder_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(decoder_ff_sptr self, int m)"""
        return _op25_swig.decoder_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(decoder_ff_sptr self) -> int"""
        return _op25_swig.decoder_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(decoder_ff_sptr self, int i) -> long"""
        return _op25_swig.decoder_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(decoder_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(decoder_ff_sptr self, int port, long max_output_buffer)
        """
        return _op25_swig.decoder_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(decoder_ff_sptr self, int i) -> long"""
        return _op25_swig.decoder_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(decoder_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(decoder_ff_sptr self, int port, long min_output_buffer)
        """
        return _op25_swig.decoder_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(decoder_ff_sptr self) -> float"""
        return _op25_swig.decoder_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(decoder_ff_sptr self) -> float"""
        return _op25_swig.decoder_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(decoder_ff_sptr self) -> float"""
        return _op25_swig.decoder_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(decoder_ff_sptr self) -> float"""
        return _op25_swig.decoder_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(decoder_ff_sptr self) -> float"""
        return _op25_swig.decoder_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(decoder_ff_sptr self) -> float"""
        return _op25_swig.decoder_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(decoder_ff_sptr self, int which) -> float
        pc_input_buffers_full(decoder_ff_sptr self) -> pmt_vector_float
        """
        return _op25_swig.decoder_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(decoder_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(decoder_ff_sptr self) -> pmt_vector_float
        """
        return _op25_swig.decoder_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(decoder_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(decoder_ff_sptr self) -> pmt_vector_float
        """
        return _op25_swig.decoder_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(decoder_ff_sptr self, int which) -> float
        pc_output_buffers_full(decoder_ff_sptr self) -> pmt_vector_float
        """
        return _op25_swig.decoder_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(decoder_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(decoder_ff_sptr self) -> pmt_vector_float
        """
        return _op25_swig.decoder_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(decoder_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(decoder_ff_sptr self) -> pmt_vector_float
        """
        return _op25_swig.decoder_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(decoder_ff_sptr self) -> float"""
        return _op25_swig.decoder_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(decoder_ff_sptr self) -> float"""
        return _op25_swig.decoder_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(decoder_ff_sptr self) -> float"""
        return _op25_swig.decoder_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(decoder_ff_sptr self) -> float"""
        return _op25_swig.decoder_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(decoder_ff_sptr self) -> float"""
        return _op25_swig.decoder_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(decoder_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _op25_swig.decoder_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(decoder_ff_sptr self)"""
        return _op25_swig.decoder_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(decoder_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _op25_swig.decoder_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(decoder_ff_sptr self) -> int"""
        return _op25_swig.decoder_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(decoder_ff_sptr self) -> int"""
        return _op25_swig.decoder_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(decoder_ff_sptr self, int priority) -> int"""
        return _op25_swig.decoder_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(decoder_ff_sptr self) -> std::string"""
        return _op25_swig.decoder_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(decoder_ff_sptr self) -> std::string"""
        return _op25_swig.decoder_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(decoder_ff_sptr self) -> io_signature_sptr"""
        return _op25_swig.decoder_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(decoder_ff_sptr self) -> io_signature_sptr"""
        return _op25_swig.decoder_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(decoder_ff_sptr self) -> long"""
        return _op25_swig.decoder_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(decoder_ff_sptr self) -> basic_block_sptr"""
        return _op25_swig.decoder_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(decoder_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _op25_swig.decoder_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(decoder_ff_sptr self) -> std::string"""
        return _op25_swig.decoder_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(decoder_ff_sptr self, std::string name)"""
        return _op25_swig.decoder_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(decoder_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _op25_swig.decoder_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(decoder_ff_sptr self) -> swig_int_ptr"""
        return _op25_swig.decoder_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(decoder_ff_sptr self) -> swig_int_ptr"""
        return _op25_swig.decoder_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(decoder_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _op25_swig.decoder_ff_sptr_message_subscribers(self, which_port)

decoder_ff_sptr_swigregister = _op25_swig.decoder_ff_sptr_swigregister
decoder_ff_sptr_swigregister(decoder_ff_sptr)


decoder_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
decoder_ff = decoder_ff.make;

class decoder_bf(object):
    """
    Decode APCO P25 signals

    op25_decoder_bf is a GNU Radio block for decoding APCO P25 signals. This class expects its input to be a stream of dibit symbols from the demodulator and produces a mono audio stream.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make():
        """
        make() -> decoder_bf_sptr

        Return a shared_ptr to a new instance of op25::decoder_bf.

        To avoid accidental use of raw pointers, op25::decoder_bf's constructor is in a private implementation class. op25::decoder_bf::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _op25_swig.decoder_bf_make()

    make = staticmethod(make)

    def destination(self):
        """
        destination(decoder_bf self) -> char const *

        Return a pointer to a string identifying the destination of the received frames.

        Params: (NONE)
        """
        return _op25_swig.decoder_bf_destination(self)


    def get_msgq(self):
        """
        get_msgq(decoder_bf self) -> msg_queue_sptr

        Accessor for the msgq attribute. Returns a pointer to the msgq if it exists.

        Params: (NONE)
        """
        return _op25_swig.decoder_bf_get_msgq(self)


    def set_msgq(self, msgq):
        """
        set_msgq(decoder_bf self, msg_queue_sptr msgq)

        Accessor for the msgq attribute. Sets the msgq to point to the provided message queue object.

        Params: (msgq)
        """
        return _op25_swig.decoder_bf_set_msgq(self, msgq)

    __swig_destroy__ = _op25_swig.delete_decoder_bf
    __del__ = lambda self: None
decoder_bf_swigregister = _op25_swig.decoder_bf_swigregister
decoder_bf_swigregister(decoder_bf)

def decoder_bf_make():
    """
    decoder_bf_make() -> decoder_bf_sptr

    Return a shared_ptr to a new instance of op25::decoder_bf.

    To avoid accidental use of raw pointers, op25::decoder_bf's constructor is in a private implementation class. op25::decoder_bf::make is the public interface for creating new instances.

    Params: (NONE)
    """
    return _op25_swig.decoder_bf_make()

class decoder_bf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::op25::decoder_bf)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::op25::decoder_bf)> self) -> decoder_bf_sptr
        __init__(boost::shared_ptr<(gr::op25::decoder_bf)> self, decoder_bf p) -> decoder_bf_sptr
        """
        this = _op25_swig.new_decoder_bf_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(decoder_bf_sptr self) -> decoder_bf"""
        return _op25_swig.decoder_bf_sptr___deref__(self)

    __swig_destroy__ = _op25_swig.delete_decoder_bf_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(decoder_bf_sptr self) -> decoder_bf_sptr

        Return a shared_ptr to a new instance of op25::decoder_bf.

        To avoid accidental use of raw pointers, op25::decoder_bf's constructor is in a private implementation class. op25::decoder_bf::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _op25_swig.decoder_bf_sptr_make(self)


    def destination(self):
        """
        destination(decoder_bf_sptr self) -> char const *

        Return a pointer to a string identifying the destination of the received frames.

        Params: (NONE)
        """
        return _op25_swig.decoder_bf_sptr_destination(self)


    def get_msgq(self):
        """
        get_msgq(decoder_bf_sptr self) -> msg_queue_sptr

        Accessor for the msgq attribute. Returns a pointer to the msgq if it exists.

        Params: (NONE)
        """
        return _op25_swig.decoder_bf_sptr_get_msgq(self)


    def set_msgq(self, msgq):
        """
        set_msgq(decoder_bf_sptr self, msg_queue_sptr msgq)

        Accessor for the msgq attribute. Sets the msgq to point to the provided message queue object.

        Params: (msgq)
        """
        return _op25_swig.decoder_bf_sptr_set_msgq(self, msgq)


    def history(self):
        """history(decoder_bf_sptr self) -> unsigned int"""
        return _op25_swig.decoder_bf_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(decoder_bf_sptr self, int which, int delay)
        declare_sample_delay(decoder_bf_sptr self, unsigned int delay)
        """
        return _op25_swig.decoder_bf_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(decoder_bf_sptr self, int which) -> unsigned int"""
        return _op25_swig.decoder_bf_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(decoder_bf_sptr self) -> int"""
        return _op25_swig.decoder_bf_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(decoder_bf_sptr self) -> double"""
        return _op25_swig.decoder_bf_sptr_relative_rate(self)


    def start(self):
        """start(decoder_bf_sptr self) -> bool"""
        return _op25_swig.decoder_bf_sptr_start(self)


    def stop(self):
        """stop(decoder_bf_sptr self) -> bool"""
        return _op25_swig.decoder_bf_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(decoder_bf_sptr self, unsigned int which_input) -> uint64_t"""
        return _op25_swig.decoder_bf_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(decoder_bf_sptr self, unsigned int which_output) -> uint64_t"""
        return _op25_swig.decoder_bf_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(decoder_bf_sptr self) -> int"""
        return _op25_swig.decoder_bf_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(decoder_bf_sptr self, int m)"""
        return _op25_swig.decoder_bf_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(decoder_bf_sptr self)"""
        return _op25_swig.decoder_bf_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(decoder_bf_sptr self) -> bool"""
        return _op25_swig.decoder_bf_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(decoder_bf_sptr self, int m)"""
        return _op25_swig.decoder_bf_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(decoder_bf_sptr self) -> int"""
        return _op25_swig.decoder_bf_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(decoder_bf_sptr self, int i) -> long"""
        return _op25_swig.decoder_bf_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(decoder_bf_sptr self, long max_output_buffer)
        set_max_output_buffer(decoder_bf_sptr self, int port, long max_output_buffer)
        """
        return _op25_swig.decoder_bf_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(decoder_bf_sptr self, int i) -> long"""
        return _op25_swig.decoder_bf_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(decoder_bf_sptr self, long min_output_buffer)
        set_min_output_buffer(decoder_bf_sptr self, int port, long min_output_buffer)
        """
        return _op25_swig.decoder_bf_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(decoder_bf_sptr self) -> float"""
        return _op25_swig.decoder_bf_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(decoder_bf_sptr self) -> float"""
        return _op25_swig.decoder_bf_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(decoder_bf_sptr self) -> float"""
        return _op25_swig.decoder_bf_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(decoder_bf_sptr self) -> float"""
        return _op25_swig.decoder_bf_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(decoder_bf_sptr self) -> float"""
        return _op25_swig.decoder_bf_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(decoder_bf_sptr self) -> float"""
        return _op25_swig.decoder_bf_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(decoder_bf_sptr self, int which) -> float
        pc_input_buffers_full(decoder_bf_sptr self) -> pmt_vector_float
        """
        return _op25_swig.decoder_bf_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(decoder_bf_sptr self, int which) -> float
        pc_input_buffers_full_avg(decoder_bf_sptr self) -> pmt_vector_float
        """
        return _op25_swig.decoder_bf_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(decoder_bf_sptr self, int which) -> float
        pc_input_buffers_full_var(decoder_bf_sptr self) -> pmt_vector_float
        """
        return _op25_swig.decoder_bf_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(decoder_bf_sptr self, int which) -> float
        pc_output_buffers_full(decoder_bf_sptr self) -> pmt_vector_float
        """
        return _op25_swig.decoder_bf_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(decoder_bf_sptr self, int which) -> float
        pc_output_buffers_full_avg(decoder_bf_sptr self) -> pmt_vector_float
        """
        return _op25_swig.decoder_bf_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(decoder_bf_sptr self, int which) -> float
        pc_output_buffers_full_var(decoder_bf_sptr self) -> pmt_vector_float
        """
        return _op25_swig.decoder_bf_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(decoder_bf_sptr self) -> float"""
        return _op25_swig.decoder_bf_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(decoder_bf_sptr self) -> float"""
        return _op25_swig.decoder_bf_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(decoder_bf_sptr self) -> float"""
        return _op25_swig.decoder_bf_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(decoder_bf_sptr self) -> float"""
        return _op25_swig.decoder_bf_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(decoder_bf_sptr self) -> float"""
        return _op25_swig.decoder_bf_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(decoder_bf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _op25_swig.decoder_bf_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(decoder_bf_sptr self)"""
        return _op25_swig.decoder_bf_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(decoder_bf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _op25_swig.decoder_bf_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(decoder_bf_sptr self) -> int"""
        return _op25_swig.decoder_bf_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(decoder_bf_sptr self) -> int"""
        return _op25_swig.decoder_bf_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(decoder_bf_sptr self, int priority) -> int"""
        return _op25_swig.decoder_bf_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(decoder_bf_sptr self) -> std::string"""
        return _op25_swig.decoder_bf_sptr_name(self)


    def symbol_name(self):
        """symbol_name(decoder_bf_sptr self) -> std::string"""
        return _op25_swig.decoder_bf_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(decoder_bf_sptr self) -> io_signature_sptr"""
        return _op25_swig.decoder_bf_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(decoder_bf_sptr self) -> io_signature_sptr"""
        return _op25_swig.decoder_bf_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(decoder_bf_sptr self) -> long"""
        return _op25_swig.decoder_bf_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(decoder_bf_sptr self) -> basic_block_sptr"""
        return _op25_swig.decoder_bf_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(decoder_bf_sptr self, int ninputs, int noutputs) -> bool"""
        return _op25_swig.decoder_bf_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(decoder_bf_sptr self) -> std::string"""
        return _op25_swig.decoder_bf_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(decoder_bf_sptr self, std::string name)"""
        return _op25_swig.decoder_bf_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(decoder_bf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _op25_swig.decoder_bf_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(decoder_bf_sptr self) -> swig_int_ptr"""
        return _op25_swig.decoder_bf_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(decoder_bf_sptr self) -> swig_int_ptr"""
        return _op25_swig.decoder_bf_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(decoder_bf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _op25_swig.decoder_bf_sptr_message_subscribers(self, which_port)

decoder_bf_sptr_swigregister = _op25_swig.decoder_bf_sptr_swigregister
decoder_bf_sptr_swigregister(decoder_bf_sptr)


decoder_bf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
decoder_bf = decoder_bf.make;

class pcap_source_b(object):
    """Read PCAP from a file and produce a stream of octets."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(path, delay):
        """
        make(char const * path, float delay) -> pcap_source_b_sptr

        Return a shared_ptr to a new instance of op25::pcap_source_b.

        To avoid accidental use of raw pointers, op25::pcap_source_b's constructor is in a private implementation class. op25::pcap_source_b::make is the public interface for creating new instances.

        Params: (path, delay)
        """
        return _op25_swig.pcap_source_b_make(path, delay)

    make = staticmethod(make)
    __swig_destroy__ = _op25_swig.delete_pcap_source_b
    __del__ = lambda self: None
pcap_source_b_swigregister = _op25_swig.pcap_source_b_swigregister
pcap_source_b_swigregister(pcap_source_b)

def pcap_source_b_make(path, delay):
    """
    pcap_source_b_make(char const * path, float delay) -> pcap_source_b_sptr

    Return a shared_ptr to a new instance of op25::pcap_source_b.

    To avoid accidental use of raw pointers, op25::pcap_source_b's constructor is in a private implementation class. op25::pcap_source_b::make is the public interface for creating new instances.

    Params: (path, delay)
    """
    return _op25_swig.pcap_source_b_make(path, delay)

class pcap_source_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::op25::pcap_source_b)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::op25::pcap_source_b)> self) -> pcap_source_b_sptr
        __init__(boost::shared_ptr<(gr::op25::pcap_source_b)> self, pcap_source_b p) -> pcap_source_b_sptr
        """
        this = _op25_swig.new_pcap_source_b_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(pcap_source_b_sptr self) -> pcap_source_b"""
        return _op25_swig.pcap_source_b_sptr___deref__(self)

    __swig_destroy__ = _op25_swig.delete_pcap_source_b_sptr
    __del__ = lambda self: None

    def make(self, path, delay):
        """
        make(pcap_source_b_sptr self, char const * path, float delay) -> pcap_source_b_sptr

        Return a shared_ptr to a new instance of op25::pcap_source_b.

        To avoid accidental use of raw pointers, op25::pcap_source_b's constructor is in a private implementation class. op25::pcap_source_b::make is the public interface for creating new instances.

        Params: (path, delay)
        """
        return _op25_swig.pcap_source_b_sptr_make(self, path, delay)


    def history(self):
        """history(pcap_source_b_sptr self) -> unsigned int"""
        return _op25_swig.pcap_source_b_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pcap_source_b_sptr self, int which, int delay)
        declare_sample_delay(pcap_source_b_sptr self, unsigned int delay)
        """
        return _op25_swig.pcap_source_b_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(pcap_source_b_sptr self, int which) -> unsigned int"""
        return _op25_swig.pcap_source_b_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(pcap_source_b_sptr self) -> int"""
        return _op25_swig.pcap_source_b_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(pcap_source_b_sptr self) -> double"""
        return _op25_swig.pcap_source_b_sptr_relative_rate(self)


    def start(self):
        """start(pcap_source_b_sptr self) -> bool"""
        return _op25_swig.pcap_source_b_sptr_start(self)


    def stop(self):
        """stop(pcap_source_b_sptr self) -> bool"""
        return _op25_swig.pcap_source_b_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(pcap_source_b_sptr self, unsigned int which_input) -> uint64_t"""
        return _op25_swig.pcap_source_b_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(pcap_source_b_sptr self, unsigned int which_output) -> uint64_t"""
        return _op25_swig.pcap_source_b_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(pcap_source_b_sptr self) -> int"""
        return _op25_swig.pcap_source_b_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(pcap_source_b_sptr self, int m)"""
        return _op25_swig.pcap_source_b_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pcap_source_b_sptr self)"""
        return _op25_swig.pcap_source_b_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pcap_source_b_sptr self) -> bool"""
        return _op25_swig.pcap_source_b_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(pcap_source_b_sptr self, int m)"""
        return _op25_swig.pcap_source_b_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(pcap_source_b_sptr self) -> int"""
        return _op25_swig.pcap_source_b_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(pcap_source_b_sptr self, int i) -> long"""
        return _op25_swig.pcap_source_b_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pcap_source_b_sptr self, long max_output_buffer)
        set_max_output_buffer(pcap_source_b_sptr self, int port, long max_output_buffer)
        """
        return _op25_swig.pcap_source_b_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(pcap_source_b_sptr self, int i) -> long"""
        return _op25_swig.pcap_source_b_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pcap_source_b_sptr self, long min_output_buffer)
        set_min_output_buffer(pcap_source_b_sptr self, int port, long min_output_buffer)
        """
        return _op25_swig.pcap_source_b_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(pcap_source_b_sptr self) -> float"""
        return _op25_swig.pcap_source_b_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pcap_source_b_sptr self) -> float"""
        return _op25_swig.pcap_source_b_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pcap_source_b_sptr self) -> float"""
        return _op25_swig.pcap_source_b_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(pcap_source_b_sptr self) -> float"""
        return _op25_swig.pcap_source_b_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pcap_source_b_sptr self) -> float"""
        return _op25_swig.pcap_source_b_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(pcap_source_b_sptr self) -> float"""
        return _op25_swig.pcap_source_b_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pcap_source_b_sptr self, int which) -> float
        pc_input_buffers_full(pcap_source_b_sptr self) -> pmt_vector_float
        """
        return _op25_swig.pcap_source_b_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pcap_source_b_sptr self, int which) -> float
        pc_input_buffers_full_avg(pcap_source_b_sptr self) -> pmt_vector_float
        """
        return _op25_swig.pcap_source_b_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pcap_source_b_sptr self, int which) -> float
        pc_input_buffers_full_var(pcap_source_b_sptr self) -> pmt_vector_float
        """
        return _op25_swig.pcap_source_b_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pcap_source_b_sptr self, int which) -> float
        pc_output_buffers_full(pcap_source_b_sptr self) -> pmt_vector_float
        """
        return _op25_swig.pcap_source_b_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pcap_source_b_sptr self, int which) -> float
        pc_output_buffers_full_avg(pcap_source_b_sptr self) -> pmt_vector_float
        """
        return _op25_swig.pcap_source_b_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pcap_source_b_sptr self, int which) -> float
        pc_output_buffers_full_var(pcap_source_b_sptr self) -> pmt_vector_float
        """
        return _op25_swig.pcap_source_b_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(pcap_source_b_sptr self) -> float"""
        return _op25_swig.pcap_source_b_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(pcap_source_b_sptr self) -> float"""
        return _op25_swig.pcap_source_b_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(pcap_source_b_sptr self) -> float"""
        return _op25_swig.pcap_source_b_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(pcap_source_b_sptr self) -> float"""
        return _op25_swig.pcap_source_b_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(pcap_source_b_sptr self) -> float"""
        return _op25_swig.pcap_source_b_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(pcap_source_b_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _op25_swig.pcap_source_b_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(pcap_source_b_sptr self)"""
        return _op25_swig.pcap_source_b_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(pcap_source_b_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _op25_swig.pcap_source_b_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(pcap_source_b_sptr self) -> int"""
        return _op25_swig.pcap_source_b_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(pcap_source_b_sptr self) -> int"""
        return _op25_swig.pcap_source_b_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(pcap_source_b_sptr self, int priority) -> int"""
        return _op25_swig.pcap_source_b_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(pcap_source_b_sptr self) -> std::string"""
        return _op25_swig.pcap_source_b_sptr_name(self)


    def symbol_name(self):
        """symbol_name(pcap_source_b_sptr self) -> std::string"""
        return _op25_swig.pcap_source_b_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(pcap_source_b_sptr self) -> io_signature_sptr"""
        return _op25_swig.pcap_source_b_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(pcap_source_b_sptr self) -> io_signature_sptr"""
        return _op25_swig.pcap_source_b_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(pcap_source_b_sptr self) -> long"""
        return _op25_swig.pcap_source_b_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(pcap_source_b_sptr self) -> basic_block_sptr"""
        return _op25_swig.pcap_source_b_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(pcap_source_b_sptr self, int ninputs, int noutputs) -> bool"""
        return _op25_swig.pcap_source_b_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(pcap_source_b_sptr self) -> std::string"""
        return _op25_swig.pcap_source_b_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(pcap_source_b_sptr self, std::string name)"""
        return _op25_swig.pcap_source_b_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(pcap_source_b_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _op25_swig.pcap_source_b_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(pcap_source_b_sptr self) -> swig_int_ptr"""
        return _op25_swig.pcap_source_b_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(pcap_source_b_sptr self) -> swig_int_ptr"""
        return _op25_swig.pcap_source_b_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(pcap_source_b_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _op25_swig.pcap_source_b_sptr_message_subscribers(self, which_port)

pcap_source_b_sptr_swigregister = _op25_swig.pcap_source_b_sptr_swigregister
pcap_source_b_sptr_swigregister(pcap_source_b_sptr)


pcap_source_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pcap_source_b = pcap_source_b.make;



