# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_op25_repeater_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_op25_repeater_swig')
    _op25_repeater_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_op25_repeater_swig', [dirname(__file__)])
        except ImportError:
            import _op25_repeater_swig
            return _op25_repeater_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_op25_repeater_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _op25_repeater_swig = swig_import_helper()
    del swig_import_helper
else:
    import _op25_repeater_swig
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _op25_repeater_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _op25_repeater_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _op25_repeater_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _op25_repeater_swig.high_res_timer_epoch()
class ambe_encoder_sb(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(versbose_flag):
        """
        make(int versbose_flag) -> ambe_encoder_sb_sptr

        Return a shared_ptr to a new instance of op25_repeater::ambe_encoder_sb.

        To avoid accidental use of raw pointers, op25_repeater::ambe_encoder_sb's constructor is in a private implementation class. op25_repeater::ambe_encoder_sb::make is the public interface for creating new instances.

        Params: (versbose_flag)
        """
        return _op25_repeater_swig.ambe_encoder_sb_make(versbose_flag)

    make = staticmethod(make)

    def set_gain_adjust(self, gain_adjust):
        """
        set_gain_adjust(ambe_encoder_sb self, float gain_adjust)



        Params: (gain_adjust)
        """
        return _op25_repeater_swig.ambe_encoder_sb_set_gain_adjust(self, gain_adjust)

    __swig_destroy__ = _op25_repeater_swig.delete_ambe_encoder_sb
    __del__ = lambda self: None
ambe_encoder_sb_swigregister = _op25_repeater_swig.ambe_encoder_sb_swigregister
ambe_encoder_sb_swigregister(ambe_encoder_sb)

def ambe_encoder_sb_make(versbose_flag):
    """
    ambe_encoder_sb_make(int versbose_flag) -> ambe_encoder_sb_sptr

    Return a shared_ptr to a new instance of op25_repeater::ambe_encoder_sb.

    To avoid accidental use of raw pointers, op25_repeater::ambe_encoder_sb's constructor is in a private implementation class. op25_repeater::ambe_encoder_sb::make is the public interface for creating new instances.

    Params: (versbose_flag)
    """
    return _op25_repeater_swig.ambe_encoder_sb_make(versbose_flag)

class ambe_encoder_sb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::op25_repeater::ambe_encoder_sb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::op25_repeater::ambe_encoder_sb)> self) -> ambe_encoder_sb_sptr
        __init__(boost::shared_ptr<(gr::op25_repeater::ambe_encoder_sb)> self, ambe_encoder_sb p) -> ambe_encoder_sb_sptr
        """
        this = _op25_repeater_swig.new_ambe_encoder_sb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(ambe_encoder_sb_sptr self) -> ambe_encoder_sb"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr___deref__(self)

    __swig_destroy__ = _op25_repeater_swig.delete_ambe_encoder_sb_sptr
    __del__ = lambda self: None

    def make(self, versbose_flag):
        """
        make(ambe_encoder_sb_sptr self, int versbose_flag) -> ambe_encoder_sb_sptr

        Return a shared_ptr to a new instance of op25_repeater::ambe_encoder_sb.

        To avoid accidental use of raw pointers, op25_repeater::ambe_encoder_sb's constructor is in a private implementation class. op25_repeater::ambe_encoder_sb::make is the public interface for creating new instances.

        Params: (versbose_flag)
        """
        return _op25_repeater_swig.ambe_encoder_sb_sptr_make(self, versbose_flag)


    def set_gain_adjust(self, gain_adjust):
        """
        set_gain_adjust(ambe_encoder_sb_sptr self, float gain_adjust)



        Params: (gain_adjust)
        """
        return _op25_repeater_swig.ambe_encoder_sb_sptr_set_gain_adjust(self, gain_adjust)


    def history(self):
        """history(ambe_encoder_sb_sptr self) -> unsigned int"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ambe_encoder_sb_sptr self, int which, int delay)
        declare_sample_delay(ambe_encoder_sb_sptr self, unsigned int delay)
        """
        return _op25_repeater_swig.ambe_encoder_sb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(ambe_encoder_sb_sptr self, int which) -> unsigned int"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(ambe_encoder_sb_sptr self) -> int"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(ambe_encoder_sb_sptr self) -> double"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_relative_rate(self)


    def start(self):
        """start(ambe_encoder_sb_sptr self) -> bool"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_start(self)


    def stop(self):
        """stop(ambe_encoder_sb_sptr self) -> bool"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(ambe_encoder_sb_sptr self, unsigned int which_input) -> uint64_t"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(ambe_encoder_sb_sptr self, unsigned int which_output) -> uint64_t"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(ambe_encoder_sb_sptr self) -> int"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(ambe_encoder_sb_sptr self, int m)"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ambe_encoder_sb_sptr self)"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ambe_encoder_sb_sptr self) -> bool"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(ambe_encoder_sb_sptr self, int m)"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(ambe_encoder_sb_sptr self) -> int"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(ambe_encoder_sb_sptr self, int i) -> long"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ambe_encoder_sb_sptr self, long max_output_buffer)
        set_max_output_buffer(ambe_encoder_sb_sptr self, int port, long max_output_buffer)
        """
        return _op25_repeater_swig.ambe_encoder_sb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(ambe_encoder_sb_sptr self, int i) -> long"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ambe_encoder_sb_sptr self, long min_output_buffer)
        set_min_output_buffer(ambe_encoder_sb_sptr self, int port, long min_output_buffer)
        """
        return _op25_repeater_swig.ambe_encoder_sb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(ambe_encoder_sb_sptr self) -> float"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ambe_encoder_sb_sptr self) -> float"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ambe_encoder_sb_sptr self) -> float"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(ambe_encoder_sb_sptr self) -> float"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ambe_encoder_sb_sptr self) -> float"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(ambe_encoder_sb_sptr self) -> float"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ambe_encoder_sb_sptr self, int which) -> float
        pc_input_buffers_full(ambe_encoder_sb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.ambe_encoder_sb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ambe_encoder_sb_sptr self, int which) -> float
        pc_input_buffers_full_avg(ambe_encoder_sb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.ambe_encoder_sb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ambe_encoder_sb_sptr self, int which) -> float
        pc_input_buffers_full_var(ambe_encoder_sb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.ambe_encoder_sb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ambe_encoder_sb_sptr self, int which) -> float
        pc_output_buffers_full(ambe_encoder_sb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.ambe_encoder_sb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ambe_encoder_sb_sptr self, int which) -> float
        pc_output_buffers_full_avg(ambe_encoder_sb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.ambe_encoder_sb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ambe_encoder_sb_sptr self, int which) -> float
        pc_output_buffers_full_var(ambe_encoder_sb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.ambe_encoder_sb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(ambe_encoder_sb_sptr self) -> float"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(ambe_encoder_sb_sptr self) -> float"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(ambe_encoder_sb_sptr self) -> float"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(ambe_encoder_sb_sptr self) -> float"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(ambe_encoder_sb_sptr self) -> float"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(ambe_encoder_sb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(ambe_encoder_sb_sptr self)"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(ambe_encoder_sb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(ambe_encoder_sb_sptr self) -> int"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(ambe_encoder_sb_sptr self) -> int"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(ambe_encoder_sb_sptr self, int priority) -> int"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(ambe_encoder_sb_sptr self) -> std::string"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(ambe_encoder_sb_sptr self) -> std::string"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(ambe_encoder_sb_sptr self) -> io_signature_sptr"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(ambe_encoder_sb_sptr self) -> io_signature_sptr"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(ambe_encoder_sb_sptr self) -> long"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(ambe_encoder_sb_sptr self) -> basic_block_sptr"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(ambe_encoder_sb_sptr self, int ninputs, int noutputs) -> bool"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(ambe_encoder_sb_sptr self) -> std::string"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(ambe_encoder_sb_sptr self, std::string name)"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(ambe_encoder_sb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(ambe_encoder_sb_sptr self) -> swig_int_ptr"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(ambe_encoder_sb_sptr self) -> swig_int_ptr"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(ambe_encoder_sb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _op25_repeater_swig.ambe_encoder_sb_sptr_message_subscribers(self, which_port)

ambe_encoder_sb_sptr_swigregister = _op25_repeater_swig.ambe_encoder_sb_sptr_swigregister
ambe_encoder_sb_sptr_swigregister(ambe_encoder_sb_sptr)


ambe_encoder_sb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ambe_encoder_sb = ambe_encoder_sb.make;

class dmr_bs_tx_bb(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(versbose_flag, conf_file):
        """
        make(int versbose_flag, char const * conf_file) -> dmr_bs_tx_bb_sptr

        Return a shared_ptr to a new instance of op25_repeater::dmr_bs_tx_bb.

        To avoid accidental use of raw pointers, op25_repeater::dmr_bs_tx_bb's constructor is in a private implementation class. op25_repeater::dmr_bs_tx_bb::make is the public interface for creating new instances.

        Params: (versbose_flag, conf_file)
        """
        return _op25_repeater_swig.dmr_bs_tx_bb_make(versbose_flag, conf_file)

    make = staticmethod(make)
    __swig_destroy__ = _op25_repeater_swig.delete_dmr_bs_tx_bb
    __del__ = lambda self: None
dmr_bs_tx_bb_swigregister = _op25_repeater_swig.dmr_bs_tx_bb_swigregister
dmr_bs_tx_bb_swigregister(dmr_bs_tx_bb)

def dmr_bs_tx_bb_make(versbose_flag, conf_file):
    """
    dmr_bs_tx_bb_make(int versbose_flag, char const * conf_file) -> dmr_bs_tx_bb_sptr

    Return a shared_ptr to a new instance of op25_repeater::dmr_bs_tx_bb.

    To avoid accidental use of raw pointers, op25_repeater::dmr_bs_tx_bb's constructor is in a private implementation class. op25_repeater::dmr_bs_tx_bb::make is the public interface for creating new instances.

    Params: (versbose_flag, conf_file)
    """
    return _op25_repeater_swig.dmr_bs_tx_bb_make(versbose_flag, conf_file)

class dmr_bs_tx_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::op25_repeater::dmr_bs_tx_bb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::op25_repeater::dmr_bs_tx_bb)> self) -> dmr_bs_tx_bb_sptr
        __init__(boost::shared_ptr<(gr::op25_repeater::dmr_bs_tx_bb)> self, dmr_bs_tx_bb p) -> dmr_bs_tx_bb_sptr
        """
        this = _op25_repeater_swig.new_dmr_bs_tx_bb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(dmr_bs_tx_bb_sptr self) -> dmr_bs_tx_bb"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr___deref__(self)

    __swig_destroy__ = _op25_repeater_swig.delete_dmr_bs_tx_bb_sptr
    __del__ = lambda self: None

    def make(self, versbose_flag, conf_file):
        """
        make(dmr_bs_tx_bb_sptr self, int versbose_flag, char const * conf_file) -> dmr_bs_tx_bb_sptr

        Return a shared_ptr to a new instance of op25_repeater::dmr_bs_tx_bb.

        To avoid accidental use of raw pointers, op25_repeater::dmr_bs_tx_bb's constructor is in a private implementation class. op25_repeater::dmr_bs_tx_bb::make is the public interface for creating new instances.

        Params: (versbose_flag, conf_file)
        """
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_make(self, versbose_flag, conf_file)


    def history(self):
        """history(dmr_bs_tx_bb_sptr self) -> unsigned int"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dmr_bs_tx_bb_sptr self, int which, int delay)
        declare_sample_delay(dmr_bs_tx_bb_sptr self, unsigned int delay)
        """
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(dmr_bs_tx_bb_sptr self, int which) -> unsigned int"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(dmr_bs_tx_bb_sptr self) -> int"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(dmr_bs_tx_bb_sptr self) -> double"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_relative_rate(self)


    def start(self):
        """start(dmr_bs_tx_bb_sptr self) -> bool"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_start(self)


    def stop(self):
        """stop(dmr_bs_tx_bb_sptr self) -> bool"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(dmr_bs_tx_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(dmr_bs_tx_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(dmr_bs_tx_bb_sptr self) -> int"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(dmr_bs_tx_bb_sptr self, int m)"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dmr_bs_tx_bb_sptr self)"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dmr_bs_tx_bb_sptr self) -> bool"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(dmr_bs_tx_bb_sptr self, int m)"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(dmr_bs_tx_bb_sptr self) -> int"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(dmr_bs_tx_bb_sptr self, int i) -> long"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dmr_bs_tx_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(dmr_bs_tx_bb_sptr self, int port, long max_output_buffer)
        """
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(dmr_bs_tx_bb_sptr self, int i) -> long"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dmr_bs_tx_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(dmr_bs_tx_bb_sptr self, int port, long min_output_buffer)
        """
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(dmr_bs_tx_bb_sptr self) -> float"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dmr_bs_tx_bb_sptr self) -> float"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dmr_bs_tx_bb_sptr self) -> float"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(dmr_bs_tx_bb_sptr self) -> float"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dmr_bs_tx_bb_sptr self) -> float"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(dmr_bs_tx_bb_sptr self) -> float"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dmr_bs_tx_bb_sptr self, int which) -> float
        pc_input_buffers_full(dmr_bs_tx_bb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dmr_bs_tx_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(dmr_bs_tx_bb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dmr_bs_tx_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(dmr_bs_tx_bb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dmr_bs_tx_bb_sptr self, int which) -> float
        pc_output_buffers_full(dmr_bs_tx_bb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dmr_bs_tx_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(dmr_bs_tx_bb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dmr_bs_tx_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(dmr_bs_tx_bb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(dmr_bs_tx_bb_sptr self) -> float"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(dmr_bs_tx_bb_sptr self) -> float"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(dmr_bs_tx_bb_sptr self) -> float"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(dmr_bs_tx_bb_sptr self) -> float"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(dmr_bs_tx_bb_sptr self) -> float"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(dmr_bs_tx_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(dmr_bs_tx_bb_sptr self)"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(dmr_bs_tx_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(dmr_bs_tx_bb_sptr self) -> int"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(dmr_bs_tx_bb_sptr self) -> int"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(dmr_bs_tx_bb_sptr self, int priority) -> int"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(dmr_bs_tx_bb_sptr self) -> std::string"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(dmr_bs_tx_bb_sptr self) -> std::string"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(dmr_bs_tx_bb_sptr self) -> io_signature_sptr"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(dmr_bs_tx_bb_sptr self) -> io_signature_sptr"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(dmr_bs_tx_bb_sptr self) -> long"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(dmr_bs_tx_bb_sptr self) -> basic_block_sptr"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(dmr_bs_tx_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(dmr_bs_tx_bb_sptr self) -> std::string"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(dmr_bs_tx_bb_sptr self, std::string name)"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(dmr_bs_tx_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(dmr_bs_tx_bb_sptr self) -> swig_int_ptr"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(dmr_bs_tx_bb_sptr self) -> swig_int_ptr"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(dmr_bs_tx_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _op25_repeater_swig.dmr_bs_tx_bb_sptr_message_subscribers(self, which_port)

dmr_bs_tx_bb_sptr_swigregister = _op25_repeater_swig.dmr_bs_tx_bb_sptr_swigregister
dmr_bs_tx_bb_sptr_swigregister(dmr_bs_tx_bb_sptr)


dmr_bs_tx_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dmr_bs_tx_bb = dmr_bs_tx_bb.make;

class ysf_tx_sb(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(versbose_flag, conf_file, fullrate_mode):
        """
        make(int versbose_flag, char const * conf_file, bool fullrate_mode) -> ysf_tx_sb_sptr

        Return a shared_ptr to a new instance of op25_repeater::ysf_tx_sb.

        To avoid accidental use of raw pointers, op25_repeater::ysf_tx_sb's constructor is in a private implementation class. op25_repeater::ysf_tx_sb::make is the public interface for creating new instances.

        Params: (versbose_flag, conf_file, fullrate_mode)
        """
        return _op25_repeater_swig.ysf_tx_sb_make(versbose_flag, conf_file, fullrate_mode)

    make = staticmethod(make)

    def set_gain_adjust(self, gain_adjust):
        """
        set_gain_adjust(ysf_tx_sb self, float gain_adjust)



        Params: (gain_adjust)
        """
        return _op25_repeater_swig.ysf_tx_sb_set_gain_adjust(self, gain_adjust)

    __swig_destroy__ = _op25_repeater_swig.delete_ysf_tx_sb
    __del__ = lambda self: None
ysf_tx_sb_swigregister = _op25_repeater_swig.ysf_tx_sb_swigregister
ysf_tx_sb_swigregister(ysf_tx_sb)

def ysf_tx_sb_make(versbose_flag, conf_file, fullrate_mode):
    """
    ysf_tx_sb_make(int versbose_flag, char const * conf_file, bool fullrate_mode) -> ysf_tx_sb_sptr

    Return a shared_ptr to a new instance of op25_repeater::ysf_tx_sb.

    To avoid accidental use of raw pointers, op25_repeater::ysf_tx_sb's constructor is in a private implementation class. op25_repeater::ysf_tx_sb::make is the public interface for creating new instances.

    Params: (versbose_flag, conf_file, fullrate_mode)
    """
    return _op25_repeater_swig.ysf_tx_sb_make(versbose_flag, conf_file, fullrate_mode)

class ysf_tx_sb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::op25_repeater::ysf_tx_sb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::op25_repeater::ysf_tx_sb)> self) -> ysf_tx_sb_sptr
        __init__(boost::shared_ptr<(gr::op25_repeater::ysf_tx_sb)> self, ysf_tx_sb p) -> ysf_tx_sb_sptr
        """
        this = _op25_repeater_swig.new_ysf_tx_sb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(ysf_tx_sb_sptr self) -> ysf_tx_sb"""
        return _op25_repeater_swig.ysf_tx_sb_sptr___deref__(self)

    __swig_destroy__ = _op25_repeater_swig.delete_ysf_tx_sb_sptr
    __del__ = lambda self: None

    def make(self, versbose_flag, conf_file, fullrate_mode):
        """
        make(ysf_tx_sb_sptr self, int versbose_flag, char const * conf_file, bool fullrate_mode) -> ysf_tx_sb_sptr

        Return a shared_ptr to a new instance of op25_repeater::ysf_tx_sb.

        To avoid accidental use of raw pointers, op25_repeater::ysf_tx_sb's constructor is in a private implementation class. op25_repeater::ysf_tx_sb::make is the public interface for creating new instances.

        Params: (versbose_flag, conf_file, fullrate_mode)
        """
        return _op25_repeater_swig.ysf_tx_sb_sptr_make(self, versbose_flag, conf_file, fullrate_mode)


    def set_gain_adjust(self, gain_adjust):
        """
        set_gain_adjust(ysf_tx_sb_sptr self, float gain_adjust)



        Params: (gain_adjust)
        """
        return _op25_repeater_swig.ysf_tx_sb_sptr_set_gain_adjust(self, gain_adjust)


    def history(self):
        """history(ysf_tx_sb_sptr self) -> unsigned int"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ysf_tx_sb_sptr self, int which, int delay)
        declare_sample_delay(ysf_tx_sb_sptr self, unsigned int delay)
        """
        return _op25_repeater_swig.ysf_tx_sb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(ysf_tx_sb_sptr self, int which) -> unsigned int"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(ysf_tx_sb_sptr self) -> int"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(ysf_tx_sb_sptr self) -> double"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_relative_rate(self)


    def start(self):
        """start(ysf_tx_sb_sptr self) -> bool"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_start(self)


    def stop(self):
        """stop(ysf_tx_sb_sptr self) -> bool"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(ysf_tx_sb_sptr self, unsigned int which_input) -> uint64_t"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(ysf_tx_sb_sptr self, unsigned int which_output) -> uint64_t"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(ysf_tx_sb_sptr self) -> int"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(ysf_tx_sb_sptr self, int m)"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ysf_tx_sb_sptr self)"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ysf_tx_sb_sptr self) -> bool"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(ysf_tx_sb_sptr self, int m)"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(ysf_tx_sb_sptr self) -> int"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(ysf_tx_sb_sptr self, int i) -> long"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ysf_tx_sb_sptr self, long max_output_buffer)
        set_max_output_buffer(ysf_tx_sb_sptr self, int port, long max_output_buffer)
        """
        return _op25_repeater_swig.ysf_tx_sb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(ysf_tx_sb_sptr self, int i) -> long"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ysf_tx_sb_sptr self, long min_output_buffer)
        set_min_output_buffer(ysf_tx_sb_sptr self, int port, long min_output_buffer)
        """
        return _op25_repeater_swig.ysf_tx_sb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(ysf_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ysf_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ysf_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(ysf_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ysf_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(ysf_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ysf_tx_sb_sptr self, int which) -> float
        pc_input_buffers_full(ysf_tx_sb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.ysf_tx_sb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ysf_tx_sb_sptr self, int which) -> float
        pc_input_buffers_full_avg(ysf_tx_sb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.ysf_tx_sb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ysf_tx_sb_sptr self, int which) -> float
        pc_input_buffers_full_var(ysf_tx_sb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.ysf_tx_sb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ysf_tx_sb_sptr self, int which) -> float
        pc_output_buffers_full(ysf_tx_sb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.ysf_tx_sb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ysf_tx_sb_sptr self, int which) -> float
        pc_output_buffers_full_avg(ysf_tx_sb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.ysf_tx_sb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ysf_tx_sb_sptr self, int which) -> float
        pc_output_buffers_full_var(ysf_tx_sb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.ysf_tx_sb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(ysf_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(ysf_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(ysf_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(ysf_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(ysf_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(ysf_tx_sb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(ysf_tx_sb_sptr self)"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(ysf_tx_sb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(ysf_tx_sb_sptr self) -> int"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(ysf_tx_sb_sptr self) -> int"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(ysf_tx_sb_sptr self, int priority) -> int"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(ysf_tx_sb_sptr self) -> std::string"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(ysf_tx_sb_sptr self) -> std::string"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(ysf_tx_sb_sptr self) -> io_signature_sptr"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(ysf_tx_sb_sptr self) -> io_signature_sptr"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(ysf_tx_sb_sptr self) -> long"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(ysf_tx_sb_sptr self) -> basic_block_sptr"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(ysf_tx_sb_sptr self, int ninputs, int noutputs) -> bool"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(ysf_tx_sb_sptr self) -> std::string"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(ysf_tx_sb_sptr self, std::string name)"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(ysf_tx_sb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _op25_repeater_swig.ysf_tx_sb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(ysf_tx_sb_sptr self) -> swig_int_ptr"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(ysf_tx_sb_sptr self) -> swig_int_ptr"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(ysf_tx_sb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _op25_repeater_swig.ysf_tx_sb_sptr_message_subscribers(self, which_port)

ysf_tx_sb_sptr_swigregister = _op25_repeater_swig.ysf_tx_sb_sptr_swigregister
ysf_tx_sb_sptr_swigregister(ysf_tx_sb_sptr)


ysf_tx_sb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ysf_tx_sb = ysf_tx_sb.make;

class dstar_tx_sb(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(versbose_flag, conf_file):
        """
        make(int versbose_flag, char const * conf_file) -> dstar_tx_sb_sptr

        Return a shared_ptr to a new instance of op25_repeater::dstar_tx_sb.

        To avoid accidental use of raw pointers, op25_repeater::dstar_tx_sb's constructor is in a private implementation class. op25_repeater::dstar_tx_sb::make is the public interface for creating new instances.

        Params: (versbose_flag, conf_file)
        """
        return _op25_repeater_swig.dstar_tx_sb_make(versbose_flag, conf_file)

    make = staticmethod(make)

    def set_gain_adjust(self, gain_adjust):
        """
        set_gain_adjust(dstar_tx_sb self, float gain_adjust)



        Params: (gain_adjust)
        """
        return _op25_repeater_swig.dstar_tx_sb_set_gain_adjust(self, gain_adjust)

    __swig_destroy__ = _op25_repeater_swig.delete_dstar_tx_sb
    __del__ = lambda self: None
dstar_tx_sb_swigregister = _op25_repeater_swig.dstar_tx_sb_swigregister
dstar_tx_sb_swigregister(dstar_tx_sb)

def dstar_tx_sb_make(versbose_flag, conf_file):
    """
    dstar_tx_sb_make(int versbose_flag, char const * conf_file) -> dstar_tx_sb_sptr

    Return a shared_ptr to a new instance of op25_repeater::dstar_tx_sb.

    To avoid accidental use of raw pointers, op25_repeater::dstar_tx_sb's constructor is in a private implementation class. op25_repeater::dstar_tx_sb::make is the public interface for creating new instances.

    Params: (versbose_flag, conf_file)
    """
    return _op25_repeater_swig.dstar_tx_sb_make(versbose_flag, conf_file)

class dstar_tx_sb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::op25_repeater::dstar_tx_sb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::op25_repeater::dstar_tx_sb)> self) -> dstar_tx_sb_sptr
        __init__(boost::shared_ptr<(gr::op25_repeater::dstar_tx_sb)> self, dstar_tx_sb p) -> dstar_tx_sb_sptr
        """
        this = _op25_repeater_swig.new_dstar_tx_sb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(dstar_tx_sb_sptr self) -> dstar_tx_sb"""
        return _op25_repeater_swig.dstar_tx_sb_sptr___deref__(self)

    __swig_destroy__ = _op25_repeater_swig.delete_dstar_tx_sb_sptr
    __del__ = lambda self: None

    def make(self, versbose_flag, conf_file):
        """
        make(dstar_tx_sb_sptr self, int versbose_flag, char const * conf_file) -> dstar_tx_sb_sptr

        Return a shared_ptr to a new instance of op25_repeater::dstar_tx_sb.

        To avoid accidental use of raw pointers, op25_repeater::dstar_tx_sb's constructor is in a private implementation class. op25_repeater::dstar_tx_sb::make is the public interface for creating new instances.

        Params: (versbose_flag, conf_file)
        """
        return _op25_repeater_swig.dstar_tx_sb_sptr_make(self, versbose_flag, conf_file)


    def set_gain_adjust(self, gain_adjust):
        """
        set_gain_adjust(dstar_tx_sb_sptr self, float gain_adjust)



        Params: (gain_adjust)
        """
        return _op25_repeater_swig.dstar_tx_sb_sptr_set_gain_adjust(self, gain_adjust)


    def history(self):
        """history(dstar_tx_sb_sptr self) -> unsigned int"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dstar_tx_sb_sptr self, int which, int delay)
        declare_sample_delay(dstar_tx_sb_sptr self, unsigned int delay)
        """
        return _op25_repeater_swig.dstar_tx_sb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(dstar_tx_sb_sptr self, int which) -> unsigned int"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(dstar_tx_sb_sptr self) -> int"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(dstar_tx_sb_sptr self) -> double"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_relative_rate(self)


    def start(self):
        """start(dstar_tx_sb_sptr self) -> bool"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_start(self)


    def stop(self):
        """stop(dstar_tx_sb_sptr self) -> bool"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(dstar_tx_sb_sptr self, unsigned int which_input) -> uint64_t"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(dstar_tx_sb_sptr self, unsigned int which_output) -> uint64_t"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(dstar_tx_sb_sptr self) -> int"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(dstar_tx_sb_sptr self, int m)"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dstar_tx_sb_sptr self)"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dstar_tx_sb_sptr self) -> bool"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(dstar_tx_sb_sptr self, int m)"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(dstar_tx_sb_sptr self) -> int"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(dstar_tx_sb_sptr self, int i) -> long"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dstar_tx_sb_sptr self, long max_output_buffer)
        set_max_output_buffer(dstar_tx_sb_sptr self, int port, long max_output_buffer)
        """
        return _op25_repeater_swig.dstar_tx_sb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(dstar_tx_sb_sptr self, int i) -> long"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dstar_tx_sb_sptr self, long min_output_buffer)
        set_min_output_buffer(dstar_tx_sb_sptr self, int port, long min_output_buffer)
        """
        return _op25_repeater_swig.dstar_tx_sb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(dstar_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dstar_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dstar_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(dstar_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dstar_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(dstar_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dstar_tx_sb_sptr self, int which) -> float
        pc_input_buffers_full(dstar_tx_sb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.dstar_tx_sb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dstar_tx_sb_sptr self, int which) -> float
        pc_input_buffers_full_avg(dstar_tx_sb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.dstar_tx_sb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dstar_tx_sb_sptr self, int which) -> float
        pc_input_buffers_full_var(dstar_tx_sb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.dstar_tx_sb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dstar_tx_sb_sptr self, int which) -> float
        pc_output_buffers_full(dstar_tx_sb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.dstar_tx_sb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dstar_tx_sb_sptr self, int which) -> float
        pc_output_buffers_full_avg(dstar_tx_sb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.dstar_tx_sb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dstar_tx_sb_sptr self, int which) -> float
        pc_output_buffers_full_var(dstar_tx_sb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.dstar_tx_sb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(dstar_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(dstar_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(dstar_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(dstar_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(dstar_tx_sb_sptr self) -> float"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(dstar_tx_sb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(dstar_tx_sb_sptr self)"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(dstar_tx_sb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(dstar_tx_sb_sptr self) -> int"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(dstar_tx_sb_sptr self) -> int"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(dstar_tx_sb_sptr self, int priority) -> int"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(dstar_tx_sb_sptr self) -> std::string"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(dstar_tx_sb_sptr self) -> std::string"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(dstar_tx_sb_sptr self) -> io_signature_sptr"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(dstar_tx_sb_sptr self) -> io_signature_sptr"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(dstar_tx_sb_sptr self) -> long"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(dstar_tx_sb_sptr self) -> basic_block_sptr"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(dstar_tx_sb_sptr self, int ninputs, int noutputs) -> bool"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(dstar_tx_sb_sptr self) -> std::string"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(dstar_tx_sb_sptr self, std::string name)"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(dstar_tx_sb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _op25_repeater_swig.dstar_tx_sb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(dstar_tx_sb_sptr self) -> swig_int_ptr"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(dstar_tx_sb_sptr self) -> swig_int_ptr"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(dstar_tx_sb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _op25_repeater_swig.dstar_tx_sb_sptr_message_subscribers(self, which_port)

dstar_tx_sb_sptr_swigregister = _op25_repeater_swig.dstar_tx_sb_sptr_swigregister
dstar_tx_sb_sptr_swigregister(dstar_tx_sb_sptr)


dstar_tx_sb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dstar_tx_sb = dstar_tx_sb.make;

class vocoder(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(encode_flag, verbose_flag, stretch_amt, udp_host, udp_port, raw_vectors_flag):
        """
        make(bool encode_flag, bool verbose_flag, int stretch_amt, char * udp_host, int udp_port, bool raw_vectors_flag) -> vocoder_sptr

        Return a shared_ptr to a new instance of op25_repeater::vocoder.

        To avoid accidental use of raw pointers, op25_repeater::vocoder's constructor is in a private implementation class. op25_repeater::vocoder::make is the public interface for creating new instances.

        Params: (encode_flag, verbose_flag, stretch_amt, udp_host, udp_port, raw_vectors_flag)
        """
        return _op25_repeater_swig.vocoder_make(encode_flag, verbose_flag, stretch_amt, udp_host, udp_port, raw_vectors_flag)

    make = staticmethod(make)

    def set_gain_adjust(self, gain_adjust):
        """
        set_gain_adjust(vocoder self, float gain_adjust)



        Params: (gain_adjust)
        """
        return _op25_repeater_swig.vocoder_set_gain_adjust(self, gain_adjust)

    __swig_destroy__ = _op25_repeater_swig.delete_vocoder
    __del__ = lambda self: None
vocoder_swigregister = _op25_repeater_swig.vocoder_swigregister
vocoder_swigregister(vocoder)

def vocoder_make(encode_flag, verbose_flag, stretch_amt, udp_host, udp_port, raw_vectors_flag):
    """
    vocoder_make(bool encode_flag, bool verbose_flag, int stretch_amt, char * udp_host, int udp_port, bool raw_vectors_flag) -> vocoder_sptr

    Return a shared_ptr to a new instance of op25_repeater::vocoder.

    To avoid accidental use of raw pointers, op25_repeater::vocoder's constructor is in a private implementation class. op25_repeater::vocoder::make is the public interface for creating new instances.

    Params: (encode_flag, verbose_flag, stretch_amt, udp_host, udp_port, raw_vectors_flag)
    """
    return _op25_repeater_swig.vocoder_make(encode_flag, verbose_flag, stretch_amt, udp_host, udp_port, raw_vectors_flag)

class vocoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::op25_repeater::vocoder)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::op25_repeater::vocoder)> self) -> vocoder_sptr
        __init__(boost::shared_ptr<(gr::op25_repeater::vocoder)> self, vocoder p) -> vocoder_sptr
        """
        this = _op25_repeater_swig.new_vocoder_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(vocoder_sptr self) -> vocoder"""
        return _op25_repeater_swig.vocoder_sptr___deref__(self)

    __swig_destroy__ = _op25_repeater_swig.delete_vocoder_sptr
    __del__ = lambda self: None

    def make(self, encode_flag, verbose_flag, stretch_amt, udp_host, udp_port, raw_vectors_flag):
        """
        make(vocoder_sptr self, bool encode_flag, bool verbose_flag, int stretch_amt, char * udp_host, int udp_port, bool raw_vectors_flag) -> vocoder_sptr

        Return a shared_ptr to a new instance of op25_repeater::vocoder.

        To avoid accidental use of raw pointers, op25_repeater::vocoder's constructor is in a private implementation class. op25_repeater::vocoder::make is the public interface for creating new instances.

        Params: (encode_flag, verbose_flag, stretch_amt, udp_host, udp_port, raw_vectors_flag)
        """
        return _op25_repeater_swig.vocoder_sptr_make(self, encode_flag, verbose_flag, stretch_amt, udp_host, udp_port, raw_vectors_flag)


    def set_gain_adjust(self, gain_adjust):
        """
        set_gain_adjust(vocoder_sptr self, float gain_adjust)



        Params: (gain_adjust)
        """
        return _op25_repeater_swig.vocoder_sptr_set_gain_adjust(self, gain_adjust)


    def history(self):
        """history(vocoder_sptr self) -> unsigned int"""
        return _op25_repeater_swig.vocoder_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(vocoder_sptr self, int which, int delay)
        declare_sample_delay(vocoder_sptr self, unsigned int delay)
        """
        return _op25_repeater_swig.vocoder_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(vocoder_sptr self, int which) -> unsigned int"""
        return _op25_repeater_swig.vocoder_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(vocoder_sptr self) -> int"""
        return _op25_repeater_swig.vocoder_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(vocoder_sptr self) -> double"""
        return _op25_repeater_swig.vocoder_sptr_relative_rate(self)


    def start(self):
        """start(vocoder_sptr self) -> bool"""
        return _op25_repeater_swig.vocoder_sptr_start(self)


    def stop(self):
        """stop(vocoder_sptr self) -> bool"""
        return _op25_repeater_swig.vocoder_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(vocoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _op25_repeater_swig.vocoder_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(vocoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _op25_repeater_swig.vocoder_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(vocoder_sptr self) -> int"""
        return _op25_repeater_swig.vocoder_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(vocoder_sptr self, int m)"""
        return _op25_repeater_swig.vocoder_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(vocoder_sptr self)"""
        return _op25_repeater_swig.vocoder_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(vocoder_sptr self) -> bool"""
        return _op25_repeater_swig.vocoder_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(vocoder_sptr self, int m)"""
        return _op25_repeater_swig.vocoder_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(vocoder_sptr self) -> int"""
        return _op25_repeater_swig.vocoder_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(vocoder_sptr self, int i) -> long"""
        return _op25_repeater_swig.vocoder_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(vocoder_sptr self, long max_output_buffer)
        set_max_output_buffer(vocoder_sptr self, int port, long max_output_buffer)
        """
        return _op25_repeater_swig.vocoder_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(vocoder_sptr self, int i) -> long"""
        return _op25_repeater_swig.vocoder_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(vocoder_sptr self, long min_output_buffer)
        set_min_output_buffer(vocoder_sptr self, int port, long min_output_buffer)
        """
        return _op25_repeater_swig.vocoder_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(vocoder_sptr self) -> float"""
        return _op25_repeater_swig.vocoder_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(vocoder_sptr self) -> float"""
        return _op25_repeater_swig.vocoder_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(vocoder_sptr self) -> float"""
        return _op25_repeater_swig.vocoder_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(vocoder_sptr self) -> float"""
        return _op25_repeater_swig.vocoder_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(vocoder_sptr self) -> float"""
        return _op25_repeater_swig.vocoder_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(vocoder_sptr self) -> float"""
        return _op25_repeater_swig.vocoder_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(vocoder_sptr self, int which) -> float
        pc_input_buffers_full(vocoder_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.vocoder_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(vocoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(vocoder_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.vocoder_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(vocoder_sptr self, int which) -> float
        pc_input_buffers_full_var(vocoder_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.vocoder_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(vocoder_sptr self, int which) -> float
        pc_output_buffers_full(vocoder_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.vocoder_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(vocoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(vocoder_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.vocoder_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(vocoder_sptr self, int which) -> float
        pc_output_buffers_full_var(vocoder_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.vocoder_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(vocoder_sptr self) -> float"""
        return _op25_repeater_swig.vocoder_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(vocoder_sptr self) -> float"""
        return _op25_repeater_swig.vocoder_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(vocoder_sptr self) -> float"""
        return _op25_repeater_swig.vocoder_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(vocoder_sptr self) -> float"""
        return _op25_repeater_swig.vocoder_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(vocoder_sptr self) -> float"""
        return _op25_repeater_swig.vocoder_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(vocoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _op25_repeater_swig.vocoder_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(vocoder_sptr self)"""
        return _op25_repeater_swig.vocoder_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(vocoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _op25_repeater_swig.vocoder_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(vocoder_sptr self) -> int"""
        return _op25_repeater_swig.vocoder_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(vocoder_sptr self) -> int"""
        return _op25_repeater_swig.vocoder_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(vocoder_sptr self, int priority) -> int"""
        return _op25_repeater_swig.vocoder_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(vocoder_sptr self) -> std::string"""
        return _op25_repeater_swig.vocoder_sptr_name(self)


    def symbol_name(self):
        """symbol_name(vocoder_sptr self) -> std::string"""
        return _op25_repeater_swig.vocoder_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(vocoder_sptr self) -> io_signature_sptr"""
        return _op25_repeater_swig.vocoder_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(vocoder_sptr self) -> io_signature_sptr"""
        return _op25_repeater_swig.vocoder_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(vocoder_sptr self) -> long"""
        return _op25_repeater_swig.vocoder_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(vocoder_sptr self) -> basic_block_sptr"""
        return _op25_repeater_swig.vocoder_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(vocoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _op25_repeater_swig.vocoder_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(vocoder_sptr self) -> std::string"""
        return _op25_repeater_swig.vocoder_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(vocoder_sptr self, std::string name)"""
        return _op25_repeater_swig.vocoder_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(vocoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _op25_repeater_swig.vocoder_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(vocoder_sptr self) -> swig_int_ptr"""
        return _op25_repeater_swig.vocoder_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(vocoder_sptr self) -> swig_int_ptr"""
        return _op25_repeater_swig.vocoder_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(vocoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _op25_repeater_swig.vocoder_sptr_message_subscribers(self, which_port)

vocoder_sptr_swigregister = _op25_repeater_swig.vocoder_sptr_swigregister
vocoder_sptr_swigregister(vocoder_sptr)


vocoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
vocoder = vocoder.make;

class gardner_costas_cc(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(samples_per_symbol, gain_mu, gain_omega, alpha, beta, max_freq, min_freq):
        """
        make(float samples_per_symbol, float gain_mu, float gain_omega, float alpha, float beta, float max_freq, float min_freq) -> gardner_costas_cc_sptr

        Return a shared_ptr to a new instance of op25_repeater::gardner_costas_cc.

        To avoid accidental use of raw pointers, op25_repeater::gardner_costas_cc's constructor is in a private implementation class. op25_repeater::gardner_costas_cc::make is the public interface for creating new instances.

        Params: (samples_per_symbol, gain_mu, gain_omega, alpha, beta, max_freq, min_freq)
        """
        return _op25_repeater_swig.gardner_costas_cc_make(samples_per_symbol, gain_mu, gain_omega, alpha, beta, max_freq, min_freq)

    make = staticmethod(make)

    def set_omega(self, omega):
        """
        set_omega(gardner_costas_cc self, float omega)



        Params: (omega)
        """
        return _op25_repeater_swig.gardner_costas_cc_set_omega(self, omega)


    def get_freq_error(self):
        """
        get_freq_error(gardner_costas_cc self) -> float



        Params: ()
        """
        return _op25_repeater_swig.gardner_costas_cc_get_freq_error(self)


    def reset(self):
        """
        reset(gardner_costas_cc self)



        Params: (NONE)
        """
        return _op25_repeater_swig.gardner_costas_cc_reset(self)

    __swig_destroy__ = _op25_repeater_swig.delete_gardner_costas_cc
    __del__ = lambda self: None
gardner_costas_cc_swigregister = _op25_repeater_swig.gardner_costas_cc_swigregister
gardner_costas_cc_swigregister(gardner_costas_cc)

def gardner_costas_cc_make(samples_per_symbol, gain_mu, gain_omega, alpha, beta, max_freq, min_freq):
    """
    gardner_costas_cc_make(float samples_per_symbol, float gain_mu, float gain_omega, float alpha, float beta, float max_freq, float min_freq) -> gardner_costas_cc_sptr

    Return a shared_ptr to a new instance of op25_repeater::gardner_costas_cc.

    To avoid accidental use of raw pointers, op25_repeater::gardner_costas_cc's constructor is in a private implementation class. op25_repeater::gardner_costas_cc::make is the public interface for creating new instances.

    Params: (samples_per_symbol, gain_mu, gain_omega, alpha, beta, max_freq, min_freq)
    """
    return _op25_repeater_swig.gardner_costas_cc_make(samples_per_symbol, gain_mu, gain_omega, alpha, beta, max_freq, min_freq)

class gardner_costas_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::op25_repeater::gardner_costas_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::op25_repeater::gardner_costas_cc)> self) -> gardner_costas_cc_sptr
        __init__(boost::shared_ptr<(gr::op25_repeater::gardner_costas_cc)> self, gardner_costas_cc p) -> gardner_costas_cc_sptr
        """
        this = _op25_repeater_swig.new_gardner_costas_cc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(gardner_costas_cc_sptr self) -> gardner_costas_cc"""
        return _op25_repeater_swig.gardner_costas_cc_sptr___deref__(self)

    __swig_destroy__ = _op25_repeater_swig.delete_gardner_costas_cc_sptr
    __del__ = lambda self: None

    def make(self, samples_per_symbol, gain_mu, gain_omega, alpha, beta, max_freq, min_freq):
        """
        make(gardner_costas_cc_sptr self, float samples_per_symbol, float gain_mu, float gain_omega, float alpha, float beta, float max_freq, float min_freq) -> gardner_costas_cc_sptr

        Return a shared_ptr to a new instance of op25_repeater::gardner_costas_cc.

        To avoid accidental use of raw pointers, op25_repeater::gardner_costas_cc's constructor is in a private implementation class. op25_repeater::gardner_costas_cc::make is the public interface for creating new instances.

        Params: (samples_per_symbol, gain_mu, gain_omega, alpha, beta, max_freq, min_freq)
        """
        return _op25_repeater_swig.gardner_costas_cc_sptr_make(self, samples_per_symbol, gain_mu, gain_omega, alpha, beta, max_freq, min_freq)


    def set_omega(self, omega):
        """
        set_omega(gardner_costas_cc_sptr self, float omega)



        Params: (omega)
        """
        return _op25_repeater_swig.gardner_costas_cc_sptr_set_omega(self, omega)


    def get_freq_error(self):
        """
        get_freq_error(gardner_costas_cc_sptr self) -> float



        Params: ()
        """
        return _op25_repeater_swig.gardner_costas_cc_sptr_get_freq_error(self)


    def reset(self):
        """
        reset(gardner_costas_cc_sptr self)



        Params: (NONE)
        """
        return _op25_repeater_swig.gardner_costas_cc_sptr_reset(self)


    def history(self):
        """history(gardner_costas_cc_sptr self) -> unsigned int"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(gardner_costas_cc_sptr self, int which, int delay)
        declare_sample_delay(gardner_costas_cc_sptr self, unsigned int delay)
        """
        return _op25_repeater_swig.gardner_costas_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(gardner_costas_cc_sptr self, int which) -> unsigned int"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(gardner_costas_cc_sptr self) -> int"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(gardner_costas_cc_sptr self) -> double"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_relative_rate(self)


    def start(self):
        """start(gardner_costas_cc_sptr self) -> bool"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_start(self)


    def stop(self):
        """stop(gardner_costas_cc_sptr self) -> bool"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(gardner_costas_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(gardner_costas_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(gardner_costas_cc_sptr self) -> int"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(gardner_costas_cc_sptr self, int m)"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(gardner_costas_cc_sptr self)"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(gardner_costas_cc_sptr self) -> bool"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(gardner_costas_cc_sptr self, int m)"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(gardner_costas_cc_sptr self) -> int"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(gardner_costas_cc_sptr self, int i) -> long"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(gardner_costas_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(gardner_costas_cc_sptr self, int port, long max_output_buffer)
        """
        return _op25_repeater_swig.gardner_costas_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(gardner_costas_cc_sptr self, int i) -> long"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(gardner_costas_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(gardner_costas_cc_sptr self, int port, long min_output_buffer)
        """
        return _op25_repeater_swig.gardner_costas_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(gardner_costas_cc_sptr self) -> float"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(gardner_costas_cc_sptr self) -> float"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(gardner_costas_cc_sptr self) -> float"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(gardner_costas_cc_sptr self) -> float"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(gardner_costas_cc_sptr self) -> float"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(gardner_costas_cc_sptr self) -> float"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(gardner_costas_cc_sptr self, int which) -> float
        pc_input_buffers_full(gardner_costas_cc_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.gardner_costas_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(gardner_costas_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(gardner_costas_cc_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.gardner_costas_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(gardner_costas_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(gardner_costas_cc_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.gardner_costas_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(gardner_costas_cc_sptr self, int which) -> float
        pc_output_buffers_full(gardner_costas_cc_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.gardner_costas_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(gardner_costas_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(gardner_costas_cc_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.gardner_costas_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(gardner_costas_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(gardner_costas_cc_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.gardner_costas_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(gardner_costas_cc_sptr self) -> float"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(gardner_costas_cc_sptr self) -> float"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(gardner_costas_cc_sptr self) -> float"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(gardner_costas_cc_sptr self) -> float"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(gardner_costas_cc_sptr self) -> float"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(gardner_costas_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(gardner_costas_cc_sptr self)"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(gardner_costas_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(gardner_costas_cc_sptr self) -> int"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(gardner_costas_cc_sptr self) -> int"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(gardner_costas_cc_sptr self, int priority) -> int"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(gardner_costas_cc_sptr self) -> std::string"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(gardner_costas_cc_sptr self) -> std::string"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(gardner_costas_cc_sptr self) -> io_signature_sptr"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(gardner_costas_cc_sptr self) -> io_signature_sptr"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(gardner_costas_cc_sptr self) -> long"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(gardner_costas_cc_sptr self) -> basic_block_sptr"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(gardner_costas_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(gardner_costas_cc_sptr self) -> std::string"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(gardner_costas_cc_sptr self, std::string name)"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(gardner_costas_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _op25_repeater_swig.gardner_costas_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(gardner_costas_cc_sptr self) -> swig_int_ptr"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(gardner_costas_cc_sptr self) -> swig_int_ptr"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(gardner_costas_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _op25_repeater_swig.gardner_costas_cc_sptr_message_subscribers(self, which_port)

gardner_costas_cc_sptr_swigregister = _op25_repeater_swig.gardner_costas_cc_sptr_swigregister
gardner_costas_cc_sptr_swigregister(gardner_costas_cc_sptr)


gardner_costas_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
gardner_costas_cc = gardner_costas_cc.make;

class p25_frame_assembler(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(udp_host, port, debug, do_imbe, do_output, do_msgq, queue, do_audio_output, do_phase2_tdma, do_nocrypt):
        """
        make(char const * udp_host, int port, int debug, bool do_imbe, bool do_output, bool do_msgq, msg_queue_sptr queue, bool do_audio_output, bool do_phase2_tdma, bool do_nocrypt) -> p25_frame_assembler_sptr

        Return a shared_ptr to a new instance of op25_repeater::p25_frame_assembler.

        To avoid accidental use of raw pointers, op25_repeater::p25_frame_assembler's constructor is in a private implementation class. op25_repeater::p25_frame_assembler::make is the public interface for creating new instances.

        Params: (udp_host, port, debug, do_imbe, do_output, do_msgq, queue, do_audio_output, do_phase2_tdma, do_nocrypt)
        """
        return _op25_repeater_swig.p25_frame_assembler_make(udp_host, port, debug, do_imbe, do_output, do_msgq, queue, do_audio_output, do_phase2_tdma, do_nocrypt)

    make = staticmethod(make)

    def set_xormask(self, p):
        """
        set_xormask(p25_frame_assembler self, char const * p)



        Params: (p)
        """
        return _op25_repeater_swig.p25_frame_assembler_set_xormask(self, p)


    def set_slotid(self, slotid):
        """
        set_slotid(p25_frame_assembler self, int slotid)



        Params: (slotid)
        """
        return _op25_repeater_swig.p25_frame_assembler_set_slotid(self, slotid)

    __swig_destroy__ = _op25_repeater_swig.delete_p25_frame_assembler
    __del__ = lambda self: None
p25_frame_assembler_swigregister = _op25_repeater_swig.p25_frame_assembler_swigregister
p25_frame_assembler_swigregister(p25_frame_assembler)

def p25_frame_assembler_make(udp_host, port, debug, do_imbe, do_output, do_msgq, queue, do_audio_output, do_phase2_tdma, do_nocrypt):
    """
    p25_frame_assembler_make(char const * udp_host, int port, int debug, bool do_imbe, bool do_output, bool do_msgq, msg_queue_sptr queue, bool do_audio_output, bool do_phase2_tdma, bool do_nocrypt) -> p25_frame_assembler_sptr

    Return a shared_ptr to a new instance of op25_repeater::p25_frame_assembler.

    To avoid accidental use of raw pointers, op25_repeater::p25_frame_assembler's constructor is in a private implementation class. op25_repeater::p25_frame_assembler::make is the public interface for creating new instances.

    Params: (udp_host, port, debug, do_imbe, do_output, do_msgq, queue, do_audio_output, do_phase2_tdma, do_nocrypt)
    """
    return _op25_repeater_swig.p25_frame_assembler_make(udp_host, port, debug, do_imbe, do_output, do_msgq, queue, do_audio_output, do_phase2_tdma, do_nocrypt)

class p25_frame_assembler_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::op25_repeater::p25_frame_assembler)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::op25_repeater::p25_frame_assembler)> self) -> p25_frame_assembler_sptr
        __init__(boost::shared_ptr<(gr::op25_repeater::p25_frame_assembler)> self, p25_frame_assembler p) -> p25_frame_assembler_sptr
        """
        this = _op25_repeater_swig.new_p25_frame_assembler_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(p25_frame_assembler_sptr self) -> p25_frame_assembler"""
        return _op25_repeater_swig.p25_frame_assembler_sptr___deref__(self)

    __swig_destroy__ = _op25_repeater_swig.delete_p25_frame_assembler_sptr
    __del__ = lambda self: None

    def make(self, udp_host, port, debug, do_imbe, do_output, do_msgq, queue, do_audio_output, do_phase2_tdma, do_nocrypt):
        """
        make(p25_frame_assembler_sptr self, char const * udp_host, int port, int debug, bool do_imbe, bool do_output, bool do_msgq, msg_queue_sptr queue, bool do_audio_output, bool do_phase2_tdma, bool do_nocrypt) -> p25_frame_assembler_sptr

        Return a shared_ptr to a new instance of op25_repeater::p25_frame_assembler.

        To avoid accidental use of raw pointers, op25_repeater::p25_frame_assembler's constructor is in a private implementation class. op25_repeater::p25_frame_assembler::make is the public interface for creating new instances.

        Params: (udp_host, port, debug, do_imbe, do_output, do_msgq, queue, do_audio_output, do_phase2_tdma, do_nocrypt)
        """
        return _op25_repeater_swig.p25_frame_assembler_sptr_make(self, udp_host, port, debug, do_imbe, do_output, do_msgq, queue, do_audio_output, do_phase2_tdma, do_nocrypt)


    def set_xormask(self, p):
        """
        set_xormask(p25_frame_assembler_sptr self, char const * p)



        Params: (p)
        """
        return _op25_repeater_swig.p25_frame_assembler_sptr_set_xormask(self, p)


    def set_slotid(self, slotid):
        """
        set_slotid(p25_frame_assembler_sptr self, int slotid)



        Params: (slotid)
        """
        return _op25_repeater_swig.p25_frame_assembler_sptr_set_slotid(self, slotid)


    def history(self):
        """history(p25_frame_assembler_sptr self) -> unsigned int"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(p25_frame_assembler_sptr self, int which, int delay)
        declare_sample_delay(p25_frame_assembler_sptr self, unsigned int delay)
        """
        return _op25_repeater_swig.p25_frame_assembler_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(p25_frame_assembler_sptr self, int which) -> unsigned int"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(p25_frame_assembler_sptr self) -> int"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(p25_frame_assembler_sptr self) -> double"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_relative_rate(self)


    def start(self):
        """start(p25_frame_assembler_sptr self) -> bool"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_start(self)


    def stop(self):
        """stop(p25_frame_assembler_sptr self) -> bool"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(p25_frame_assembler_sptr self, unsigned int which_input) -> uint64_t"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(p25_frame_assembler_sptr self, unsigned int which_output) -> uint64_t"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(p25_frame_assembler_sptr self) -> int"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(p25_frame_assembler_sptr self, int m)"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(p25_frame_assembler_sptr self)"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(p25_frame_assembler_sptr self) -> bool"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(p25_frame_assembler_sptr self, int m)"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(p25_frame_assembler_sptr self) -> int"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(p25_frame_assembler_sptr self, int i) -> long"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(p25_frame_assembler_sptr self, long max_output_buffer)
        set_max_output_buffer(p25_frame_assembler_sptr self, int port, long max_output_buffer)
        """
        return _op25_repeater_swig.p25_frame_assembler_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(p25_frame_assembler_sptr self, int i) -> long"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(p25_frame_assembler_sptr self, long min_output_buffer)
        set_min_output_buffer(p25_frame_assembler_sptr self, int port, long min_output_buffer)
        """
        return _op25_repeater_swig.p25_frame_assembler_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(p25_frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(p25_frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(p25_frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(p25_frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(p25_frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(p25_frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(p25_frame_assembler_sptr self, int which) -> float
        pc_input_buffers_full(p25_frame_assembler_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.p25_frame_assembler_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(p25_frame_assembler_sptr self, int which) -> float
        pc_input_buffers_full_avg(p25_frame_assembler_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.p25_frame_assembler_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(p25_frame_assembler_sptr self, int which) -> float
        pc_input_buffers_full_var(p25_frame_assembler_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.p25_frame_assembler_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(p25_frame_assembler_sptr self, int which) -> float
        pc_output_buffers_full(p25_frame_assembler_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.p25_frame_assembler_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(p25_frame_assembler_sptr self, int which) -> float
        pc_output_buffers_full_avg(p25_frame_assembler_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.p25_frame_assembler_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(p25_frame_assembler_sptr self, int which) -> float
        pc_output_buffers_full_var(p25_frame_assembler_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.p25_frame_assembler_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(p25_frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(p25_frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(p25_frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(p25_frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(p25_frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(p25_frame_assembler_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(p25_frame_assembler_sptr self)"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(p25_frame_assembler_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(p25_frame_assembler_sptr self) -> int"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(p25_frame_assembler_sptr self) -> int"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(p25_frame_assembler_sptr self, int priority) -> int"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(p25_frame_assembler_sptr self) -> std::string"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_name(self)


    def symbol_name(self):
        """symbol_name(p25_frame_assembler_sptr self) -> std::string"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(p25_frame_assembler_sptr self) -> io_signature_sptr"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(p25_frame_assembler_sptr self) -> io_signature_sptr"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(p25_frame_assembler_sptr self) -> long"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(p25_frame_assembler_sptr self) -> basic_block_sptr"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(p25_frame_assembler_sptr self, int ninputs, int noutputs) -> bool"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(p25_frame_assembler_sptr self) -> std::string"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(p25_frame_assembler_sptr self, std::string name)"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(p25_frame_assembler_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _op25_repeater_swig.p25_frame_assembler_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(p25_frame_assembler_sptr self) -> swig_int_ptr"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(p25_frame_assembler_sptr self) -> swig_int_ptr"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(p25_frame_assembler_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _op25_repeater_swig.p25_frame_assembler_sptr_message_subscribers(self, which_port)

p25_frame_assembler_sptr_swigregister = _op25_repeater_swig.p25_frame_assembler_sptr_swigregister
p25_frame_assembler_sptr_swigregister(p25_frame_assembler_sptr)


p25_frame_assembler_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
p25_frame_assembler = p25_frame_assembler.make;

class frame_assembler(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(options, debug, queue):
        """
        make(char const * options, int debug, msg_queue_sptr queue) -> frame_assembler_sptr

        Return a shared_ptr to a new instance of op25_repeater::frame_assembler.

        To avoid accidental use of raw pointers, op25_repeater::frame_assembler's constructor is in a private implementation class. op25_repeater::frame_assembler::make is the public interface for creating new instances.

        Params: (options, debug, queue)
        """
        return _op25_repeater_swig.frame_assembler_make(options, debug, queue)

    make = staticmethod(make)

    def set_xormask(self, p):
        """
        set_xormask(frame_assembler self, char const * p)



        Params: (p)
        """
        return _op25_repeater_swig.frame_assembler_set_xormask(self, p)


    def set_slotid(self, slotid):
        """
        set_slotid(frame_assembler self, int slotid)



        Params: (slotid)
        """
        return _op25_repeater_swig.frame_assembler_set_slotid(self, slotid)

    __swig_destroy__ = _op25_repeater_swig.delete_frame_assembler
    __del__ = lambda self: None
frame_assembler_swigregister = _op25_repeater_swig.frame_assembler_swigregister
frame_assembler_swigregister(frame_assembler)

def frame_assembler_make(options, debug, queue):
    """
    frame_assembler_make(char const * options, int debug, msg_queue_sptr queue) -> frame_assembler_sptr

    Return a shared_ptr to a new instance of op25_repeater::frame_assembler.

    To avoid accidental use of raw pointers, op25_repeater::frame_assembler's constructor is in a private implementation class. op25_repeater::frame_assembler::make is the public interface for creating new instances.

    Params: (options, debug, queue)
    """
    return _op25_repeater_swig.frame_assembler_make(options, debug, queue)

class frame_assembler_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::op25_repeater::frame_assembler)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::op25_repeater::frame_assembler)> self) -> frame_assembler_sptr
        __init__(boost::shared_ptr<(gr::op25_repeater::frame_assembler)> self, frame_assembler p) -> frame_assembler_sptr
        """
        this = _op25_repeater_swig.new_frame_assembler_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(frame_assembler_sptr self) -> frame_assembler"""
        return _op25_repeater_swig.frame_assembler_sptr___deref__(self)

    __swig_destroy__ = _op25_repeater_swig.delete_frame_assembler_sptr
    __del__ = lambda self: None

    def make(self, options, debug, queue):
        """
        make(frame_assembler_sptr self, char const * options, int debug, msg_queue_sptr queue) -> frame_assembler_sptr

        Return a shared_ptr to a new instance of op25_repeater::frame_assembler.

        To avoid accidental use of raw pointers, op25_repeater::frame_assembler's constructor is in a private implementation class. op25_repeater::frame_assembler::make is the public interface for creating new instances.

        Params: (options, debug, queue)
        """
        return _op25_repeater_swig.frame_assembler_sptr_make(self, options, debug, queue)


    def set_xormask(self, p):
        """
        set_xormask(frame_assembler_sptr self, char const * p)



        Params: (p)
        """
        return _op25_repeater_swig.frame_assembler_sptr_set_xormask(self, p)


    def set_slotid(self, slotid):
        """
        set_slotid(frame_assembler_sptr self, int slotid)



        Params: (slotid)
        """
        return _op25_repeater_swig.frame_assembler_sptr_set_slotid(self, slotid)


    def history(self):
        """history(frame_assembler_sptr self) -> unsigned int"""
        return _op25_repeater_swig.frame_assembler_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(frame_assembler_sptr self, int which, int delay)
        declare_sample_delay(frame_assembler_sptr self, unsigned int delay)
        """
        return _op25_repeater_swig.frame_assembler_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(frame_assembler_sptr self, int which) -> unsigned int"""
        return _op25_repeater_swig.frame_assembler_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(frame_assembler_sptr self) -> int"""
        return _op25_repeater_swig.frame_assembler_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(frame_assembler_sptr self) -> double"""
        return _op25_repeater_swig.frame_assembler_sptr_relative_rate(self)


    def start(self):
        """start(frame_assembler_sptr self) -> bool"""
        return _op25_repeater_swig.frame_assembler_sptr_start(self)


    def stop(self):
        """stop(frame_assembler_sptr self) -> bool"""
        return _op25_repeater_swig.frame_assembler_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(frame_assembler_sptr self, unsigned int which_input) -> uint64_t"""
        return _op25_repeater_swig.frame_assembler_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(frame_assembler_sptr self, unsigned int which_output) -> uint64_t"""
        return _op25_repeater_swig.frame_assembler_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(frame_assembler_sptr self) -> int"""
        return _op25_repeater_swig.frame_assembler_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(frame_assembler_sptr self, int m)"""
        return _op25_repeater_swig.frame_assembler_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(frame_assembler_sptr self)"""
        return _op25_repeater_swig.frame_assembler_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(frame_assembler_sptr self) -> bool"""
        return _op25_repeater_swig.frame_assembler_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(frame_assembler_sptr self, int m)"""
        return _op25_repeater_swig.frame_assembler_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(frame_assembler_sptr self) -> int"""
        return _op25_repeater_swig.frame_assembler_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(frame_assembler_sptr self, int i) -> long"""
        return _op25_repeater_swig.frame_assembler_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(frame_assembler_sptr self, long max_output_buffer)
        set_max_output_buffer(frame_assembler_sptr self, int port, long max_output_buffer)
        """
        return _op25_repeater_swig.frame_assembler_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(frame_assembler_sptr self, int i) -> long"""
        return _op25_repeater_swig.frame_assembler_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(frame_assembler_sptr self, long min_output_buffer)
        set_min_output_buffer(frame_assembler_sptr self, int port, long min_output_buffer)
        """
        return _op25_repeater_swig.frame_assembler_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.frame_assembler_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.frame_assembler_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.frame_assembler_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.frame_assembler_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.frame_assembler_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.frame_assembler_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(frame_assembler_sptr self, int which) -> float
        pc_input_buffers_full(frame_assembler_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.frame_assembler_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(frame_assembler_sptr self, int which) -> float
        pc_input_buffers_full_avg(frame_assembler_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.frame_assembler_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(frame_assembler_sptr self, int which) -> float
        pc_input_buffers_full_var(frame_assembler_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.frame_assembler_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(frame_assembler_sptr self, int which) -> float
        pc_output_buffers_full(frame_assembler_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.frame_assembler_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(frame_assembler_sptr self, int which) -> float
        pc_output_buffers_full_avg(frame_assembler_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.frame_assembler_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(frame_assembler_sptr self, int which) -> float
        pc_output_buffers_full_var(frame_assembler_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.frame_assembler_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.frame_assembler_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.frame_assembler_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.frame_assembler_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.frame_assembler_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(frame_assembler_sptr self) -> float"""
        return _op25_repeater_swig.frame_assembler_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(frame_assembler_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _op25_repeater_swig.frame_assembler_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(frame_assembler_sptr self)"""
        return _op25_repeater_swig.frame_assembler_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(frame_assembler_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _op25_repeater_swig.frame_assembler_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(frame_assembler_sptr self) -> int"""
        return _op25_repeater_swig.frame_assembler_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(frame_assembler_sptr self) -> int"""
        return _op25_repeater_swig.frame_assembler_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(frame_assembler_sptr self, int priority) -> int"""
        return _op25_repeater_swig.frame_assembler_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(frame_assembler_sptr self) -> std::string"""
        return _op25_repeater_swig.frame_assembler_sptr_name(self)


    def symbol_name(self):
        """symbol_name(frame_assembler_sptr self) -> std::string"""
        return _op25_repeater_swig.frame_assembler_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(frame_assembler_sptr self) -> io_signature_sptr"""
        return _op25_repeater_swig.frame_assembler_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(frame_assembler_sptr self) -> io_signature_sptr"""
        return _op25_repeater_swig.frame_assembler_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(frame_assembler_sptr self) -> long"""
        return _op25_repeater_swig.frame_assembler_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(frame_assembler_sptr self) -> basic_block_sptr"""
        return _op25_repeater_swig.frame_assembler_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(frame_assembler_sptr self, int ninputs, int noutputs) -> bool"""
        return _op25_repeater_swig.frame_assembler_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(frame_assembler_sptr self) -> std::string"""
        return _op25_repeater_swig.frame_assembler_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(frame_assembler_sptr self, std::string name)"""
        return _op25_repeater_swig.frame_assembler_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(frame_assembler_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _op25_repeater_swig.frame_assembler_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(frame_assembler_sptr self) -> swig_int_ptr"""
        return _op25_repeater_swig.frame_assembler_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(frame_assembler_sptr self) -> swig_int_ptr"""
        return _op25_repeater_swig.frame_assembler_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(frame_assembler_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _op25_repeater_swig.frame_assembler_sptr_message_subscribers(self, which_port)

frame_assembler_sptr_swigregister = _op25_repeater_swig.frame_assembler_sptr_swigregister
frame_assembler_sptr_swigregister(frame_assembler_sptr)


frame_assembler_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
frame_assembler = frame_assembler.make;

class fsk4_slicer_fb(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(slice_levels):
        """
        make(pmt_vector_float slice_levels) -> fsk4_slicer_fb_sptr

        Return a shared_ptr to a new instance of op25_repeater::fsk4_slicer_fb.

        To avoid accidental use of raw pointers, op25_repeater::fsk4_slicer_fb's constructor is in a private implementation class. op25_repeater::fsk4_slicer_fb::make is the public interface for creating new instances.

        Params: (slice_levels)
        """
        return _op25_repeater_swig.fsk4_slicer_fb_make(slice_levels)

    make = staticmethod(make)
    __swig_destroy__ = _op25_repeater_swig.delete_fsk4_slicer_fb
    __del__ = lambda self: None
fsk4_slicer_fb_swigregister = _op25_repeater_swig.fsk4_slicer_fb_swigregister
fsk4_slicer_fb_swigregister(fsk4_slicer_fb)

def fsk4_slicer_fb_make(slice_levels):
    """
    fsk4_slicer_fb_make(pmt_vector_float slice_levels) -> fsk4_slicer_fb_sptr

    Return a shared_ptr to a new instance of op25_repeater::fsk4_slicer_fb.

    To avoid accidental use of raw pointers, op25_repeater::fsk4_slicer_fb's constructor is in a private implementation class. op25_repeater::fsk4_slicer_fb::make is the public interface for creating new instances.

    Params: (slice_levels)
    """
    return _op25_repeater_swig.fsk4_slicer_fb_make(slice_levels)

class fsk4_slicer_fb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::op25_repeater::fsk4_slicer_fb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::op25_repeater::fsk4_slicer_fb)> self) -> fsk4_slicer_fb_sptr
        __init__(boost::shared_ptr<(gr::op25_repeater::fsk4_slicer_fb)> self, fsk4_slicer_fb p) -> fsk4_slicer_fb_sptr
        """
        this = _op25_repeater_swig.new_fsk4_slicer_fb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fsk4_slicer_fb_sptr self) -> fsk4_slicer_fb"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr___deref__(self)

    __swig_destroy__ = _op25_repeater_swig.delete_fsk4_slicer_fb_sptr
    __del__ = lambda self: None

    def make(self, slice_levels):
        """
        make(fsk4_slicer_fb_sptr self, pmt_vector_float slice_levels) -> fsk4_slicer_fb_sptr

        Return a shared_ptr to a new instance of op25_repeater::fsk4_slicer_fb.

        To avoid accidental use of raw pointers, op25_repeater::fsk4_slicer_fb's constructor is in a private implementation class. op25_repeater::fsk4_slicer_fb::make is the public interface for creating new instances.

        Params: (slice_levels)
        """
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_make(self, slice_levels)


    def history(self):
        """history(fsk4_slicer_fb_sptr self) -> unsigned int"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fsk4_slicer_fb_sptr self, int which, int delay)
        declare_sample_delay(fsk4_slicer_fb_sptr self, unsigned int delay)
        """
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(fsk4_slicer_fb_sptr self, int which) -> unsigned int"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(fsk4_slicer_fb_sptr self) -> int"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(fsk4_slicer_fb_sptr self) -> double"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_relative_rate(self)


    def start(self):
        """start(fsk4_slicer_fb_sptr self) -> bool"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_start(self)


    def stop(self):
        """stop(fsk4_slicer_fb_sptr self) -> bool"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(fsk4_slicer_fb_sptr self, unsigned int which_input) -> uint64_t"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(fsk4_slicer_fb_sptr self, unsigned int which_output) -> uint64_t"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(fsk4_slicer_fb_sptr self) -> int"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(fsk4_slicer_fb_sptr self, int m)"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fsk4_slicer_fb_sptr self)"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fsk4_slicer_fb_sptr self) -> bool"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(fsk4_slicer_fb_sptr self, int m)"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(fsk4_slicer_fb_sptr self) -> int"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fsk4_slicer_fb_sptr self, int i) -> long"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fsk4_slicer_fb_sptr self, long max_output_buffer)
        set_max_output_buffer(fsk4_slicer_fb_sptr self, int port, long max_output_buffer)
        """
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fsk4_slicer_fb_sptr self, int i) -> long"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fsk4_slicer_fb_sptr self, long min_output_buffer)
        set_min_output_buffer(fsk4_slicer_fb_sptr self, int port, long min_output_buffer)
        """
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fsk4_slicer_fb_sptr self, int which) -> float
        pc_input_buffers_full(fsk4_slicer_fb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fsk4_slicer_fb_sptr self, int which) -> float
        pc_input_buffers_full_avg(fsk4_slicer_fb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fsk4_slicer_fb_sptr self, int which) -> float
        pc_input_buffers_full_var(fsk4_slicer_fb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fsk4_slicer_fb_sptr self, int which) -> float
        pc_output_buffers_full(fsk4_slicer_fb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fsk4_slicer_fb_sptr self, int which) -> float
        pc_output_buffers_full_avg(fsk4_slicer_fb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fsk4_slicer_fb_sptr self, int which) -> float
        pc_output_buffers_full_var(fsk4_slicer_fb_sptr self) -> pmt_vector_float
        """
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(fsk4_slicer_fb_sptr self) -> float"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fsk4_slicer_fb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fsk4_slicer_fb_sptr self)"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fsk4_slicer_fb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(fsk4_slicer_fb_sptr self) -> int"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(fsk4_slicer_fb_sptr self) -> int"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(fsk4_slicer_fb_sptr self, int priority) -> int"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(fsk4_slicer_fb_sptr self) -> std::string"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fsk4_slicer_fb_sptr self) -> std::string"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fsk4_slicer_fb_sptr self) -> io_signature_sptr"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fsk4_slicer_fb_sptr self) -> io_signature_sptr"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fsk4_slicer_fb_sptr self) -> long"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fsk4_slicer_fb_sptr self) -> basic_block_sptr"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fsk4_slicer_fb_sptr self, int ninputs, int noutputs) -> bool"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fsk4_slicer_fb_sptr self) -> std::string"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fsk4_slicer_fb_sptr self, std::string name)"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fsk4_slicer_fb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fsk4_slicer_fb_sptr self) -> swig_int_ptr"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fsk4_slicer_fb_sptr self) -> swig_int_ptr"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fsk4_slicer_fb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _op25_repeater_swig.fsk4_slicer_fb_sptr_message_subscribers(self, which_port)

fsk4_slicer_fb_sptr_swigregister = _op25_repeater_swig.fsk4_slicer_fb_sptr_swigregister
fsk4_slicer_fb_sptr_swigregister(fsk4_slicer_fb_sptr)


fsk4_slicer_fb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fsk4_slicer_fb = fsk4_slicer_fb.make;



